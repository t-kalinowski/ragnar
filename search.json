[{"path":"https://ragnar.tidyverse.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ragnar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"getting-started-with-ragnar","dir":"Articles","previous_headings":"","what":"Getting Started with ragnar","title":"ragnar","text":"Retrieval-Augmented Generation (RAG) practical technique improving large language model (LLM) outputs grounding external, trusted content. ragnar package provides tools building RAG workflows R, focus transparency control step. guide walks building simple chat tool Quarto documentation using ragnar. code examples simplified clarity; full implementation, see https://github.com/t-kalinowski/quartohelp.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"why-rag-the-hallucination-problem","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Why RAG? The Hallucination Problem","title":"ragnar","text":"LLMs can produce remarkable outputs: fluent, confident, plausible responses wide range prompts. anyone spent time ChatGPT similar models observed responses confident, plausible, wrong. generated output wrong, call hallucination, hallucinations seem inherent consequence LLMs work. LLMs operate text sequences; seem possess concept “facts” “truth” like humans . generate text awareness whether true false, guided similarity patterns text sequences training data. Put simply, philosopher Harry Frankfurt’s sense word, models generate “bullshit” 1: impossible someone lie unless thinks knows truth. Producing bullshit requires conviction. person lies thereby responding truth, extent respectful . honest man speaks, says believes true; liar, correspondingly indispensable considers statements false. bullshitter, however, bets : neither side true side false. eye facts , eyes honest man liar , except insofar may pertinent interest getting away says. care whether things says describe reality correctly. just picks , makes , suit purpose. RAG addresses retrieving relevant excerpts corpus trusted, vetted sources asking LLM summarize, paraphrase, answer user’s question using material. grounds response known content reduces risk hallucination. RAG shifts LLM’s job open-ended generation summarizing quoting retrieved material. RAG reduces eliminate hallucinations. richer texts tasks, LLMs may still miss nuance overgeneralize. reason, ’s still helpful RAG-based tools present links back original material users can check context verify details.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"use-case-quarto-docs-chat-vs--standard-search","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Use Case: Quarto Docs Chat vs. Standard Search","title":"ragnar","text":"Standard documentation search default answering questions tools like Quarto limitations. Search requires precise wording, familiarity docs’ structure, sometimes piecing together information multiple pages. Even focused site search, users spend time skimming navigating correct material, may still miss answer. RAG-powered chat tool offer better alternative. ask natural language question. tool retrieves relevant excerpts docs using semantic keyword-based search, asks LLM answer using excerpts. result concise, context-aware answer, complete links relevant docs. course, useful LLM actually provides correct useful answers.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"setting-up-rag","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Setting up RAG","title":"ragnar","text":"high level, setting RAG two stages: preparing knowledge store (database processed content), establishing workflow retrieval chat.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"creating-the-store","dir":"Articles","previous_headings":"Getting Started with ragnar > Setting up RAG","what":"Creating the Store","title":"ragnar","text":"First, create store. store holds processed docs embeddings. create store, select embedding provider. choice fixed store, can always create new store want change . can use OpenAI, open-source model via embed_ollama(), function.","code":"store_location <- \"quarto.ragnar.duckdb\" store <- ragnar_store_create(   store_location,   embed = \\(x) ragnar::embed_openai(x, model = \"text-embedding-3-small\") )"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"identify-documents-for-processing","dir":"Articles","previous_headings":"Getting Started with ragnar > Setting up RAG > Creating the Store","what":"Identify Documents for Processing","title":"ragnar","text":"Gather list documents want insert database. local files, can simple list.files() directory documents. ’re building store website, can use ragnar_find_links() collect URLs. sites, may easier clone build site locally, reference files local file system. can also process sitemap one available. end step, character vector file paths URLs.","code":"paths <- ragnar_find_links(\"https://quarto.org/\", depth = 3)"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"convert-documents-to-markdown","dir":"Articles","previous_headings":"Getting Started with ragnar > Setting up RAG > Creating the Store","what":"Convert Documents to Markdown","title":"ragnar","text":"Convert document markdown. Markdown preferred ’s plain text, easy inspect, keeps token counts low, works well humans LLMs. step, ragnar provides read_as_markdown() ragnar_read(), can accept wide variety formats (pdf, docx, pptx, html). many cases works well, specialized needs can opt custom-tailored approach. See help ?read_as_markdown guidance alternatives ’d like improve default conversion. (begin optimizing basic app working.) ragnar_read() thing read_as_markdown(), instead returning string, returns dataframe also includes origin hash columns, possibly metadata.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"chunk-and-augment","dir":"Articles","previous_headings":"Getting Started with ragnar > Setting up RAG > Creating the Store","what":"Chunk and Augment","title":"ragnar","text":"Next, split documents smaller chunks. necessary embedding models context size limits, chunking allows return just relevant excerpts long document. Chunking delicate; Ideally, chunk stand alone without relying context surrounding document. can aim split text natural points like headings, paragraphs, sentences, avoid splits middle sentence word. Additionally, augment chunks context describes chunk’s origin—URL, title, headings, subheadings—LLM can provide links back source, LLM embedding models can better situate chunk’s content. help tasks, use ragnar_read() ragnar_chunk(). ragnar_read() can split document using markdown headings, also extracting heading titles columns dataframe. Use frame_by_tags argument select document heading levels want segment . ’re starting already converted markdown content, use markdown_frame() markdown_segment() instead. ragnar_chunk() chunks text , trying split semantic boundaries (like paragraphs sentences) progressively finer granularity needed, using boundary types chunk size specify. default chunk size 1600 characters, one page. augment chunks, use glue string interpolation include metadata extracted ragnar_read(). Since ’ll every document, ’s helpful wrap step function. Note alternative approach augmenting chunks context can use LLM instructions “situate excerpt document,” , worse, “summarize document.” can work carries significant risk. Remember, goal create knowledge store—trusted, factual, vetted source truth. Giving LLM opportunity corrupt store hallucinations may necessary depending needs, initial approximation, recommend starting ingestion pipeline give opportunities hallucinations enter store.","code":"read_and_chunk <- function(path) {   path |>     ragnar_read(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) |>     ragnar_chunk(boundaries = c(\"paragraph\", \"sentence\")) |>     dplyr::mutate(       text = glue::glue(         r\"---(         > Excerpt from: {origin}         > {h1}         > {h2}         > {h3}         {text}         )---\"       )     ) }"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"insert-in-the-store","dir":"Articles","previous_headings":"Getting Started with ragnar > Setting up RAG > Creating the Store","what":"Insert in the Store","title":"ragnar","text":"Take augmented document chunks insert store calling ragnar_store_insert(). function automatically generate embeddings using embed function specified store first created.","code":"ragnar_store_insert(store, chunks)"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"tying-it-together","dir":"Articles","previous_headings":"Getting Started with ragnar > Setting up RAG > Creating the Store","what":"Tying it Together","title":"ragnar","text":"Repeat steps every document want insert store. ’re done processing documents, call ragnar_store_build_index() finalize store build index efficient retrieval. store index built, store ready retrieval.","code":"for (path in paths) {   chunks <- read_and_chunk(path)   ragnar_store_insert(store, chunks) }  ragnar_store_build_index()"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"retrieval","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Retrieval","title":"ragnar","text":"retrieve content store, call ragnar_retrieve(). function uses two retrieval methods: Vector similarity search (vss): Retrieves chunks whose embeddings similar query embedding. semantic search, used find content conceptually related query, even different words used. BM25: Retrieves chunks based keyword matching, using techniques like stemming term frequency. conventional text search, used find content containing specific words phrases. limit search one method, use ragnar_retrieve_vss() ragnar_retrieve_bm25(). can register ragnar_retrieve() LLM tool. effective technique implementing RAG, allows LLM rephrase unclear questions, ask follow-questions, search needed. Register ragnar_retrieve() tool ellmer::Chat using ragnar_register_tool_retrieve(): Note registered tool intentionally simple. asks LLM provide one argument: query string. LLM tool calls just text completions , like LLM output. minimize complexity tool interface minimize chance LLM errors. Rather exposing detailed search options LLM, can instead set high top_k value return chunks usually necessary. provides slack chat app, can gracefully handle less--perfectly-ranked search results.","code":"client <- ellmer::chat_openai() ragnar_register_tool_retrieve(   client, store, top_k = 10,   description = \"the quarto website\" )"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"customizing-retrieval","dir":"Articles","previous_headings":"Getting Started with ragnar > Retrieval","what":"Customizing Retrieval","title":"ragnar","text":"context-specific tasks, may want define retrieval tool pair system prompt explains use results. example, suppose want LLM perform repeated searches first search return relevant information, also want ensure repeated searches return previously seen chunks. ’s example might First, set system prompt: Next, define custom tool: Register custom tool:","code":"client <- chat_openai(model = \"gpt-4.1\") client$set_system_prompt(glue::trim(   \"   You are an expert in Quarto documentation. You are concise.   Always perform a search of the Quarto knowledge store for each user request.   If the initial search does not return relevant documents, you may perform   up to three additional searches. Each search will return unique, new excerpts.   If no relevant results are found, inform the user and do not attempt to answer the question.   If the user request is ambiguous, perform at least one search first, then ask a clarifying question.    Every response must cite links to official documentation sources.   Always include a minimal, fully self-contained Quarto document in your answer.   \" )) rag_retrieve_quarto_excerpts <- local({   retrieved_chunk_ids <- integer()   function(text) {     # Search, excluding previously seen chunks     chunks <- dplyr::tbl(store) |>       dplyr::filter(!.data$id %in% retrieved_chunk_ids) |>       ragnar::ragnar_retrieve(text, top_k = 10)      # Update seen chunks     retrieved_chunk_ids <<- unique(c(retrieved_chunk_ids, chunks$id))      # Return formatted excerpts delimited with pseudo-xml tags.     stringi::stri_c(       \"<excerpt>\",       chunks$text,       \"<\/excerpt>\",       sep = \"\\n\",       collapse = \"\\n\"     )   } }) client$register_tool(ellmer::tool(   rag_retrieve_quarto_excerpts,   glue::trim(     \"     Use this tool to retrieve the most relevant excerpts from the Quarto     knowledge store for a given text input. This function:     - uses both vector (semantic) similarity and BM25 text search,     - never returns the same excerpt twice in the same session,     - returns results as plain text wrapped in <excerpt> tags.     \"   ),   text = ellmer::type_string() ))"},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"troubleshooting-and-debugging","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Troubleshooting and Debugging","title":"ragnar","text":"Developing RAG app iterative process. many places potentially spend effort improvements: selecting sources converting markdown chunking augmenting chunks using metadata narrow search choice embedding model choice LLM system prompt tool definition ’s helpful iterate context end--end application. can use ragnar_store_inspect() interactively see kinds results returned store different queries. helps confirm chunking augmentation preserve semantic meaning embedding model working expected. results shown inspector seem useful relevant , likely won’t useful LLM either. Iterate store creation pipeline retrieval returns meaningful excerpts.  things can try: Increase chunk size. Specify coarser custom boundaries ragnar_chunk(). Augment chunks additional context. Try different embedding model. Try different LLM. Increase top_k return results. Iterate LLM system prompt give clearer, precise instructions. Chat interfaces LLM marketing invite us think LLMs general-purpose agents, able answer anything. practice, however, 2025, building reliable, accurate, LLM-powered solution details facts matter means carefully scoping model responsible . mind, note chat app described intend replace documentation act general-purpose assistant. goal provide faster, contextual way find right place docs, enough information user decide need read . ’s designed escalate failure gracefully: LLM able provide accurate answer, user can transition reading source material without friction.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"cost-management","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Cost Management","title":"ragnar","text":"Using LLMs embeddings incurs costs, regardless whether use commercial provider open source model hardware. tips managing costs: Use model large context window can include context, necessarily expensive reasoning model. RAG, summarization paraphrasing typically need flagship reasoning models return useful results. cost generating embeddings negligible. example, generating embeddings entire Quarto website costs approximately cent. Keep chat sessions focused concise. Start new chat sessions unrelated questions. Long conversations increase token usage, costs, practice, also lower output quality LLM gets confused stale irrelevant conversation turns. reference, flagship OpenAI model ‘gpt-4.1’, query RAG-powered chat app like quartohelp costs approximately 1 cent.","code":""},{"path":"https://ragnar.tidyverse.org/articles/ragnar.html","id":"summary","dir":"Articles","previous_headings":"Getting Started with ragnar","what":"Summary","title":"ragnar","text":"ragnar provides practical, transparent way build RAG workflows R. combining semantic keyword search, clear chunking augmentation, focused prompt tool design, can create fast, interactive documentation chat tools help users find answers quickly reliably. Building good RAG system iterative. Inspect intermediate outputs, tune chunking retrieval, keep user’s workflow mind. guardrails, can reduce hallucinations deliver trustworthy, grounded answers—always giving users path original source. details full example, see quartohelp package.","code":""},{"path":"https://ragnar.tidyverse.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomasz Kalinowski. Author, maintainer.","code":""},{"path":"https://ragnar.tidyverse.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kalinowski T (2025). ragnar: Retrieval-Augmented Generation (RAG) Workflows. R package version 0.0.0.9000, https://tidyverse.github.io/ragnar/.","code":"@Manual{,   title = {ragnar: Retrieval-Augmented Generation (RAG) Workflows},   author = {Tomasz Kalinowski},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://tidyverse.github.io/ragnar/}, }"},{"path":"https://ragnar.tidyverse.org/index.html","id":"ragnar-","dir":"","previous_headings":"","what":"Retrieval-Augmented Generation (RAG) Workflows","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"ragnar R package helps implement Retrieval-Augmented Generation (RAG) workflows. focuses providing complete solution sensible defaults, still giving knowledgeable user precise control steps. don’t believe can fully automate creation good RAG system, ’s important ragnar black box. ragnar designed transparent—can inspect easily outputs intermediate steps understand ’s happening.","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"","code":"pak::pak(\"tidyverse/ragnar\")"},{"path":[]},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_1-document-processing","dir":"","previous_headings":"Key Steps","what":"1. Document Processing","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"ragnar works wide variety document types, using MarkItDown convert content Markdown. Key functions: ragnar_find_links(): Find links webpage ragnar_read(): Convert file URL markdown","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_2-text-chunking","dir":"","previous_headings":"Key Steps","what":"2. Text Chunking","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"Next divide document multiple chunks. Ragnar defaults strategy preserves semantics document, provide plenty options tweak approach. Key functions: ragnar_chunk(): Higher-level function identifies semantic boundaries chunks text. ragnar_segment(): Lower-level function identifies semantic boundaries. ragnar_chunk_segments(): Lower-level function chunks pre-segmented text.","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_3-context-augmentation-optional","dir":"","previous_headings":"Key Steps","what":"3. Context Augmentation (Optional)","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"RAG applications benefit augmenting text chunks additional context, document headings subheadings. ragnar doesn’t directly export functions , supports template-based augmentation ragnar_read(frame_by_tags, split_by_tags). Future versions support generating context summaries via LLM calls. Key functions: ragnar_read(): Use frame_by_tags /split_by_tags arguments associate text chunks document position. markdown_segment(): Segment markdown text character vector using semantic tags (e.g., headings, paragraphs, code chunks). markdown_frame(): Convert markdown text dataframe.","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_4-embedding","dir":"","previous_headings":"Key Steps","what":"4. Embedding","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"ragnar can help compute embeddings chunk. goal ragnar provide access embeddings popular LLM providers. Currently ollama openai providers. Key functions: embed_ollama() embed_openai() Note calling embedding function directly typically necessary. Instead, embedding function specified store first created, automatically called needed ragnar_retreive() ragnar_store_insert().","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_5-storage","dir":"","previous_headings":"Key Steps","what":"5. Storage","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"Processed data stored format optimized efficient searching, using duckdb default. API designed extensible, allowing additional packages implement support different storage providers. Key functions: ragnar_store_create() ragnar_store_connect() ragnar_store_insert()","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_6-retrieval","dir":"","previous_headings":"Key Steps","what":"6. Retrieval","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"Given prompt, retrieve related chunks based embedding distance bm25 text search. Key functions: ragnar_retrieve() ragnar_retrieve_vss(): Retrieve using vss DuckDB extension ragnar_retrieve_bm25(): Retrieve using full-text search DuckDB extension","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_7-re-ranking-optional","dir":"","previous_headings":"Key Steps","what":"7. Re-ranking (Optional)","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"Re-ranking retrieved chunks planned future releases.","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"id_8-prompt-generation","dir":"","previous_headings":"Key Steps","what":"8. Prompt Generation","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"ragnar can equip ellmer::Chat object retrieve tool enables LLM retreive content store -demand. ragnar_register_tool_retrieve(chat, store).","code":""},{"path":"https://ragnar.tidyverse.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Retrieval-Augmented Generation (RAG) Workflows","text":"’s example using ragnar create knowledge store R Data Science (2e) book: store set , can retrieve relevant text chunks.","code":"library(ragnar)  base_url <- \"https://r4ds.hadley.nz\" pages <- ragnar_find_links(base_url)  store_location <- \"r4ds.ragnar.duckdb\" unlink(store_location)  store <- ragnar_store_create(   store_location,   embed = \\(x) ragnar::embed_ollama(x, model = \"all-minilm\") )   for (page in pages) {   message(\"ingesting: \", page)   chunks <- page |>     ragnar_read(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) |>     dplyr::mutate(link = page) |>     ragnar_chunk(boundaries = c(\"paragraph\", \"sentence\")) |>     # add context to chunks     dplyr::mutate(text = glue::glue(r\"---(     # Excerpt from the book \"R for Data Science (2e)\"     link: {link}     chapter: {h1}     section: {h2}     subsection: {h3}     content: {text}      )---\"))    ragnar_store_insert(store, chunks) } #> ingesting: https://r4ds.hadley.nz/arrow.html #> ingesting: https://r4ds.hadley.nz/base-R.html #> ingesting: https://r4ds.hadley.nz/communicate.html #> ingesting: https://r4ds.hadley.nz/communication.html #> ingesting: https://r4ds.hadley.nz/data-import.html #> ingesting: https://r4ds.hadley.nz/data-tidy.html #> ingesting: https://r4ds.hadley.nz/data-transform.html #> ingesting: https://r4ds.hadley.nz/data-visualize.html #> ingesting: https://r4ds.hadley.nz/databases.html #> ingesting: https://r4ds.hadley.nz/datetimes.html #> ingesting: https://r4ds.hadley.nz/EDA.html #> ingesting: https://r4ds.hadley.nz/factors.html #> ingesting: https://r4ds.hadley.nz/functions.html #> ingesting: https://r4ds.hadley.nz/import.html #> ingesting: https://r4ds.hadley.nz/intro.html #> ingesting: https://r4ds.hadley.nz/iteration.html #> ingesting: https://r4ds.hadley.nz/joins.html #> ingesting: https://r4ds.hadley.nz/layers.html #> ingesting: https://r4ds.hadley.nz/logicals.html #> ingesting: https://r4ds.hadley.nz/missing-values.html #> ingesting: https://r4ds.hadley.nz/numbers.html #> ingesting: https://r4ds.hadley.nz/preface-2e.html #> ingesting: https://r4ds.hadley.nz/program.html #> ingesting: https://r4ds.hadley.nz/quarto-formats.html #> ingesting: https://r4ds.hadley.nz/quarto.html #> ingesting: https://r4ds.hadley.nz/rectangling.html #> ingesting: https://r4ds.hadley.nz/regexps.html #> ingesting: https://r4ds.hadley.nz/spreadsheets.html #> ingesting: https://r4ds.hadley.nz/strings.html #> ingesting: https://r4ds.hadley.nz/transform.html #> ingesting: https://r4ds.hadley.nz/visualize.html #> ingesting: https://r4ds.hadley.nz/webscraping.html #> ingesting: https://r4ds.hadley.nz/whole-game.html #> ingesting: https://r4ds.hadley.nz/workflow-basics.html #> ingesting: https://r4ds.hadley.nz/workflow-help.html #> ingesting: https://r4ds.hadley.nz/workflow-scripts.html #> ingesting: https://r4ds.hadley.nz/workflow-style.html   ragnar_store_build_index(store) #' ## Retrieving Chunks  library(ragnar) store_location <- \"r4ds.ragnar.duckdb\" store <- ragnar_store_connect(store_location, read_only = TRUE)  text <- \"How can I subset a dataframe with a logical vector?\"   ## Retrieving Chunks # Once the store is set up, retrieve the most relevant text chunks like this  embedding_near_chunks <- ragnar_retrieve_vss(store, text, top_k = 3) embedding_near_chunks #> # A tibble: 3 × 3 #>      id l2sq_distance text                                                       #>   <int>         <dbl> <chr>                                                      #> 1    31         0.920 \"# Excerpt from the book \\\"R for Data Science (2e)\\\"\\nlin… #> 2   625         0.941 \"# Excerpt from the book \\\"R for Data Science (2e)\\\"\\nlin… #> 3   639         0.943 \"# Excerpt from the book \\\"R for Data Science (2e)\\\"\\nlin… embedding_near_chunks$text[1] |> cat(sep = \"\\n~~~~~~~~\\n\") #> # Excerpt from the book \"R for Data Science (2e)\" #> link: https://r4ds.hadley.nz/base-R.html #> chapter: # 27  A field guide to base R #> section: ## 27.2 Selecting multiple elements with `[` #> subsection: ### 27.2.2 Subsetting data frames #> content: There are quite a few different ways[1](#fn1) that you can use `[` with a data frame, but the most important way is to select rows and columns independently with `df[rows, cols]`. Here `rows` and `cols` are vectors as described above. For example, `df[rows, ]` and `df[, cols]` select just rows or just columns, using the empty subset to preserve the other dimension. #>  #> Here are a couple of examples: #>  #> ``` #> df <- tibble( #>   x = 1:3, #>   y = c(\"a\", \"e\", \"f\"), #>   z = runif(3) #> ) #>  #> # Select first row and second column #> df[1, 2] #> #> # A tibble: 1 × 1 #> #>   y #> #>   <chr> #> #> 1 a #>  #> # Select all rows and columns x and y #> df[, c(\"x\" , \"y\")] #> #> # A tibble: 3 × 2 #> #>       x y #> #>   <int> <chr> #> #> 1     1 a #> #> 2     2 e #> #> 3     3 f #>  #> # Select rows where `x` is greater than 1 and all columns #> df[df$x > 1, ] #> #> # A tibble: 2 × 3 #> #>       x y         z #> #>   <int> <chr> <dbl> #> #> 1     2 e     0.834 #> #> 2     3 f     0.601 #> ``` #>  #> We’ll come back to `$` shortly, but you should be able to guess what `df$x` does from the context: it extracts the `x` variable from `df`. We need to use it here because `[` doesn’t use tidy evaluation, so you need to be explicit about the source of the `x` variable. bm25_near_chunks <- ragnar_retrieve_bm25(store, text, top_k = 3) bm25_near_chunks #> # A tibble: 3 × 3 #>      id bm25_score text                                                          #>   <int>      <dbl> <chr>                                                         #> 1    29       5.62 \"# Excerpt from the book \\\"R for Data Science (2e)\\\"\\nlink: … #> 2   645       5.54 \"# Excerpt from the book \\\"R for Data Science (2e)\\\"\\nlink: … #> 3   624       5.07 \"# Excerpt from the book \\\"R for Data Science (2e)\\\"\\nlink: … bm25_near_chunks$text[1] |> cat(sep = \"\\n~~~~~~~~\\n\") #> # Excerpt from the book \"R for Data Science (2e)\" #> link: https://r4ds.hadley.nz/base-R.html #> chapter: # 27  A field guide to base R #> section: ## 27.2 Selecting multiple elements with `[` #> subsection: ### 27.2.1 Subsetting vectors #> content: There are five main types of things that you can subset a vector with, i.e., that can be the `i` in `x[i]`: #>  #> 1. **A vector of positive integers**. Subsetting with positive integers keeps the elements at those positions: #>  #>    ``` #>    x <- c(\"one\", \"two\", \"three\", \"four\", \"five\") #>    x[c(3, 2, 5)] #>    #> [1] \"three\" \"two\"   \"five\" #>    ``` #>  #>    By repeating a position, you can actually make a longer output than input, making the term “subsetting” a bit of a misnomer. #>  #>    ``` #>    x[c(1, 1, 5, 5, 5, 2)] #>    #> [1] \"one\"  \"one\"  \"five\" \"five\" \"five\" \"two\" #>    ``` #> 2. **A vector of negative integers**. Negative values drop the elements at the specified positions: #>  #>    ``` #>    x[c(-1, -3, -5)] #>    #> [1] \"two\"  \"four\" #>    ``` #> 3. **A logical vector**. Subsetting with a logical vector keeps all values corresponding to a `TRUE` value. This is most often useful in conjunction with the comparison functions. #>  #>    ``` #>    x <- c(10, 3, NA, 5, 8, 1, NA) #>  #>    # All non-missing values of x #>    x[!is.na(x)] #>    #> [1] 10  3  5  8  1 #>  #>    # All even (or missing!) values of x #>    x[x %% 2 == 0] #>    #> [1] 10 NA  8 NA #>    ``` #>  #>    Unlike `[filter()](https://dplyr.tidyverse.org/reference/filter.html)`, `NA` indices will be included in the output as `NA`s. #> 4. **A character vector**. If you have a named vector, you can subset it with a character vector: #>  #>    ``` #>    x <- c(abc = 1, def = 2, xyz = 5) #>    x[c(\"xyz\", \"def\")] #>    #> xyz def #>    #>   5   2 #>    ``` # get both vss and bm26 relevant_chunks <- ragnar_retrieve(   store, text, top_k = 3,   methods = c(\"vss\", \"bm25\") ) relevant_chunks #> # A tibble: 6 × 4 #>      id l2sq_distance bm25_score text                                            #>   <int>         <dbl>      <dbl> <chr>                                           #> 1    31         0.920       2.91 \"# Excerpt from the book \\\"R for Data Science … #> 2   625         0.941       3.58 \"# Excerpt from the book \\\"R for Data Science … #> 3   639         0.943       2.58 \"# Excerpt from the book \\\"R for Data Science … #> 4    29         0.980       5.62 \"# Excerpt from the book \\\"R for Data Science … #> 5   645         0.971       5.54 \"# Excerpt from the book \\\"R for Data Science … #> 6   624         1.22        5.07 \"# Excerpt from the book \\\"R for Data Science …  # Register ellmer tool ## You can register an ellmer tool to retrieve chunks as well. ## This enables the LLM model to make tool calls to retreive chunks. system_prompt <- stringr::str_squish(r\"--(     You are an expert R programmer and mentor.     You often respond by first direct quoting material from book or documentation,     then adding your own additional context and interpertation. )--\") chat <- ellmer::chat_openai(system_prompt, model = \"gpt-4o\") # chat <- ellmer::chat_ollama(system_prompt, model = \"llama3.2:1b\")  ragnar_register_tool_retrieve(chat, store)  chat$chat(\"How can I subset a dataframe?\") #> To subset a dataframe in R, you can use multiple methods depending on your  #> needs. A common way to do this is with the square bracket `[` operator, which  #> allows you to select rows and columns separately using a matrix-style indexing. #> Here are some basic ways to subset a dataframe: #>  #> 1. **Select Specific Rows and Columns:** #>    You can select specific rows and columns by specifying their indices inside  #> the square brackets `df[rows, cols]`. Here's an example: #>  #>    ```r #>    df <- data.frame(x = 1:3, y = c(\"a\", \"e\", \"f\"), z = runif(3)) #>  #>    df[1, 2]  # Selects the first row and second column. #>    df[, c(\"x\", \"y\")]  # Select all rows for columns x and y. #>    df[df$x > 1, ]  # Select rows where x is greater than 1 with all columns. #>    ``` #>  #> 2. **Handling Tibbles vs. Data Frames:** #>    It's important to understand the difference in behavior between tibbles and  #> base data frames: #>  #>    ```r #>    df1 <- data.frame(x = 1:3) #>    df1[, \"x\"]  # Returns a vector. #>  #>    df2 <- tibble(x = 1:3) #>    df2[, \"x\"]  # Always returns a tibble. #>  #>    # To avoid ambiguity in data.frames and ensure a dataframe output: #>    df1[, \"x\", drop = FALSE] #>    ``` #>  #> 3. **Logical Vectors:** #>    Logical vectors are often used for conditional subsetting: #>  #>    ```r #>    x <- c(10, 3, NA, 5, 8, 1, NA) #>    x[!is.na(x)]  # All non-missing values. #>    x[x %% 2 == 0]  # All even values, including NA. #>    ``` #>  #> Each method has its specific use case and can be chosen based on the context of #> what you're trying to achieve with your dataset. Understanding these subsetting #> techniques provides flexibility in how you manipulate and analyze data frames."},{"path":"https://ragnar.tidyverse.org/reference/embed_bedrock.html","id":null,"dir":"Reference","previous_headings":"","what":"Embed text using a Bedrock model — embed_bedrock","title":"Embed text using a Bedrock model — embed_bedrock","text":"Embed text using Bedrock model","code":""},{"path":"https://ragnar.tidyverse.org/reference/embed_bedrock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embed text using a Bedrock model — embed_bedrock","text":"","code":"embed_bedrock(x, model, profile, api_args = list())"},{"path":"https://ragnar.tidyverse.org/reference/embed_bedrock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embed text using a Bedrock model — embed_bedrock","text":"x x can : character vector, case matrix embeddings returned. data frame column named text, case dataframe returned additional column named embedding. Missing NULL, case function returned can called get embeddings. convenient way partial additional arguments like model, convenient way produce function can passed embed argument ragnar_store_create(). model Currently Cohere.ai Amazon Titan models supported. guardarails kind model used, model must available AWS region specified profile. may look available models Bedrock Model Catalog profile AWS profile use. api_args Additional arguments pass Bedrock API. Dependending model, might able provide different parameters. Check documentation model using Bedrock user guide.","code":""},{"path":"https://ragnar.tidyverse.org/reference/embed_bedrock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embed text using a Bedrock model — embed_bedrock","text":"x missing returns function can called get embeddings. x missing, matrix embeddings 1 row per input string, dataframe 'embedding' column.","code":""},{"path":[]},{"path":"https://ragnar.tidyverse.org/reference/embed_ollama.html","id":null,"dir":"Reference","previous_headings":"","what":"Embedd Text — embed_ollama","title":"Embedd Text — embed_ollama","text":"Embedd Text","code":""},{"path":"https://ragnar.tidyverse.org/reference/embed_ollama.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embedd Text — embed_ollama","text":"","code":"embed_ollama(   x,   base_url = \"http://localhost:11434\",   model = \"all-minilm\",   batch_size = 10L )  embed_openai(   x,   model = \"text-embedding-3-small\",   base_url = \"https://api.openai.com/v1\",   api_key = get_envvar(\"OPENAI_API_KEY\"),   dims = NULL,   user = get_ragnar_username(),   batch_size = 20L )"},{"path":"https://ragnar.tidyverse.org/reference/embed_ollama.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embedd Text — embed_ollama","text":"x x can : character vector, case matrix embeddings returned. data frame column named text, case dataframe returned additional column named embedding. Missing NULL, case function returned can called get embeddings. convenient way partial additional arguments like model, convenient way produce function can passed embed argument ragnar_store_create(). base_url string, url service available. model string; model name batch_size split x batches embedding. Integer, limit strings include single request. api_key resolved using env var OPENAI_API_KEY dims integer, can used truncate embedding specific size. user User name passed via API.","code":""},{"path":"https://ragnar.tidyverse.org/reference/embed_ollama.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embedd Text — embed_ollama","text":"x character vector, numeric matrix returned, nrow = length(x) ncol = <model-embedding-size>. x data.frame, new embedding matrix \"column\" added, containing matrix described previous sentence. matrix embeddings 1 row per input string, dataframe 'embedding' column.","code":""},{"path":"https://ragnar.tidyverse.org/reference/embed_ollama.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Embedd Text — embed_ollama","text":"","code":"text <- c(\"a chunk of text\", \"another chunk of text\", \"one more chunk of text\") if (FALSE) { # \\dontrun{ text |>   embed_ollama() |>   str()  text |>   embed_openai() |>   str() } # }"},{"path":"https://ragnar.tidyverse.org/reference/markdown_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment markdown text — markdown_segment","title":"Segment markdown text — markdown_segment","text":"Segment markdown text","code":""},{"path":"https://ragnar.tidyverse.org/reference/markdown_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment markdown text — markdown_segment","text":"","code":"markdown_segment(   text,   tags = c(\"h1\", \"h2\", \"h3\", \"h4\"),   trim = FALSE,   omit_empty = FALSE )  markdown_frame(text, frame_by = c(\"h1\", \"h2\", \"h3\"), segment_by = NULL)"},{"path":"https://ragnar.tidyverse.org/reference/markdown_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment markdown text — markdown_segment","text":"text Markdown string tags, segment_by character vector html tag names, e.g., c(\"h1\", \"h2\", \"h3\", \"pre\") trim logical, trim whitespace segments omit_empty logical, whether remove empty segments frame_by Character vector tags become columns returned dataframe.","code":""},{"path":"https://ragnar.tidyverse.org/reference/markdown_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment markdown text — markdown_segment","text":"named character vector. Names correspond tags, \"\" content inbetween tags.","code":""},{"path":"https://ragnar.tidyverse.org/reference/markdown_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment markdown text — markdown_segment","text":"","code":"md <- r\"---(  # Sample Markdown File  ## Introduction  This is a sample **Markdown** file for testing.  ### Features  - Simple **bold** text - _Italicized_ text - `Inline code` - A [link](https://example.com) - ‘Curly quotes are 3 bytes chars.’ Non-ascii text is fine.  This is a paragraph with <p> tag.  This next segment with code has a <pre> tag  ```r hello_world <- function() {   cat(\"Hello, World!\\n\") } ```  A table <table>:    | Name  | Age | City      |   |-------|----:|----------|   | Alice |  25 | New York |   | Bob   |  30 | London   |   ## Conclusion  Common tags:  - h1, h2, h3, h4, h5, h6: section headings - p: paragraph (prose) - pre: pre-formatted text, meant to be displayed with monospace font. Typically code or code output - blockquote: A blockquote - table: A table - ul: Unordered list - ol: Ordered list - li: Individual list item in a <ul> or <ol>   )---\" markdown_segment(md) |> tibble::enframe() #> # A tibble: 9 × 2 #>   name  value                                                                    #>   <chr> <chr>                                                                    #> 1 \"\"    \"\\n\\n\"                                                                   #> 2 \"h1\"  \"# Sample Markdown File\"                                                 #> 3 \"\"    \"\\n\\n\"                                                                   #> 4 \"h2\"  \"## Introduction\"                                                        #> 5 \"\"    \"\\n\\nThis is a sample **Markdown** file for testing.\\n\\n\"                #> 6 \"h3\"  \"### Features\"                                                           #> 7 \"\"    \"\\n\\n- Simple **bold** text\\n- _Italicized_ text\\n- `Inline code`\\n- A … #> 8 \"h2\"  \"## Conclusion\"                                                          #> 9 \"\"    \"\\n\\nCommon tags:\\n\\n- h1, h2, h3, h4, h5, h6: section headings\\n- p: p… markdown_segment(md |> trimws()) |> tibble::enframe() #> # A tibble: 8 × 2 #>   name  value                                                                    #>   <chr> <chr>                                                                    #> 1 \"h1\"  \"# Sample Markdown File\"                                                 #> 2 \"\"    \"\\n\\n\"                                                                   #> 3 \"h2\"  \"## Introduction\"                                                        #> 4 \"\"    \"\\n\\nThis is a sample **Markdown** file for testing.\\n\\n\"                #> 5 \"h3\"  \"### Features\"                                                           #> 6 \"\"    \"\\n\\n- Simple **bold** text\\n- _Italicized_ text\\n- `Inline code`\\n- A … #> 7 \"h2\"  \"## Conclusion\"                                                          #> 8 \"\"    \"\\n\\nCommon tags:\\n\\n- h1, h2, h3, h4, h5, h6: section headings\\n- p: p… markdown_segment(md, c(\"li\"), trim = TRUE, omit_empty = TRUE) |> tibble::enframe() #> # A tibble: 15 × 2 #>    name  value                                                                   #>    <chr> <chr>                                                                   #>  1 \"\"    \"# Sample Markdown File\\n\\n## Introduction\\n\\nThis is a sample **Markd… #>  2 \"li\"  \"- Simple **bold** text\"                                                #>  3 \"li\"  \"- _Italicized_ text\"                                                   #>  4 \"li\"  \"- `Inline code`\"                                                       #>  5 \"li\"  \"- A [link](https://example.com)\"                                       #>  6 \"li\"  \"- ‘Curly quotes are 3 bytes chars.’ Non-ascii text is fine.\"           #>  7 \"\"    \"This is a paragraph with <p> tag.\\n\\nThis next segment with code has … #>  8 \"li\"  \"- h1, h2, h3, h4, h5, h6: section headings\"                            #>  9 \"li\"  \"- p: paragraph (prose)\"                                                #> 10 \"li\"  \"- pre: pre-formatted text, meant to be displayed with monospace font.… #> 11 \"li\"  \"- blockquote: A blockquote\"                                            #> 12 \"li\"  \"- table: A table\"                                                      #> 13 \"li\"  \"- ul: Unordered list\"                                                  #> 14 \"li\"  \"- ol: Ordered list\"                                                    #> 15 \"li\"  \"- li: Individual list item in a <ul> or <ol>\"                          markdown_segment(md, c(\"table\"), trim = TRUE, omit_empty = TRUE) |> tibble::enframe() #> # A tibble: 3 × 2 #>   name    value                                                                  #>   <chr>   <chr>                                                                  #> 1 \"\"      \"# Sample Markdown File\\n\\n## Introduction\\n\\nThis is a sample **Mark… #> 2 \"table\" \"| Name  | Age | City      |\\n  |-------|----:|----------|\\n  | Alice… #> 3 \"\"      \"## Conclusion\\n\\nCommon tags:\\n\\n- h1, h2, h3, h4, h5, h6: section h… markdown_segment(md, c(\"ul\"), trim = TRUE, omit_empty = TRUE) |> tibble::enframe() #> # A tibble: 4 × 2 #>   name  value                                                                    #>   <chr> <chr>                                                                    #> 1 \"\"    \"# Sample Markdown File\\n\\n## Introduction\\n\\nThis is a sample **Markdo… #> 2 \"ul\"  \"- Simple **bold** text\\n- _Italicized_ text\\n- `Inline code`\\n- A [lin… #> 3 \"\"    \"This is a paragraph with <p> tag.\\n\\nThis next segment with code has a… #> 4 \"ul\"  \"- h1, h2, h3, h4, h5, h6: section headings\\n- p: paragraph (prose)\\n- …"},{"path":"https://ragnar.tidyverse.org/reference/ragnar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ragnar: Retrieval-Augmented Generation (RAG) Workflows — ragnar-package","title":"ragnar: Retrieval-Augmented Generation (RAG) Workflows — ragnar-package","text":"Provides tools implementing Retrieval-Augmented Generation (RAG) workflows Large Language Models (LLMs). Includes functions document processing, text chunking, embedding generation, storage management, content retrieval. Supports various document types embedding providers ('Ollama', 'OpenAI'), 'DuckDB' default storage backend. Integrates 'ellmer' package equip chat objects retrieval capabilities. Designed offer sensible defaults customization options transparent access intermediate outputs.","code":""},{"path":[]},{"path":"https://ragnar.tidyverse.org/reference/ragnar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ragnar: Retrieval-Augmented Generation (RAG) Workflows — ragnar-package","text":"Maintainer: Tomasz Kalinowski tomasz@posit.co","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Chunk text — ragnar_chunk","title":"Chunk text — ragnar_chunk","text":"Functions chunking text smaller pieces preserving meaningful semantics. functions provide flexible ways split text based various boundaries (sentences, words, etc.) controlling chunk sizes overlap.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chunk text — ragnar_chunk","text":"","code":"ragnar_chunk(   x,   max_size = 1600L,   boundaries = c(\"paragraph\", \"sentence\", \"line_break\", \"word\", \"character\"),   ...,   trim = TRUE,   simplify = TRUE )  ragnar_segment(x, boundaries = \"sentence\", ..., trim = FALSE, simplify = TRUE)  ragnar_chunk_segments(x, max_size = 1600L, ..., simplify = TRUE, trim = TRUE)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chunk text — ragnar_chunk","text":"x character vector, list character vectors, data frame containing text column. max_size Integer. maximum number characters chunk. Defaults 1600, typically approximately 400 tokens, 1 page text. boundaries sequence boundary types use order max_size satisfied. Valid values \"sentence\", \"word\", \"line_break\", \"character\", \"paragraph\", stringr_pattern object like stringr::fixed(). ... Additional arguments passed internal functions. tokenizer use tokens instead characters count (fully implemented yet) trim logical, whether trim leading trailing whitespace strings. Default TRUE. simplify Logical. TRUE, output simplified. FALSE, returns vector length x. TRUE, character strings unlist()ed, dataframes tidyr::unchop()ed.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chunk text — ragnar_chunk","text":"character input simplify = FALSE: list character vectors character input simplify = TRUE: character vector chunks data frame input simplify = FALSE: data frame number rows input, text column transformed list chararacter vectors. data frame input simplify = TRUE: data frame input simplify=FALSE, text column expanded tidyr::unchop()","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_chunk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chunk text — ragnar_chunk","text":"Chunking combination two fundamental operations: identifying boundaries: finding character positions makes sense split string. extracting slices: extracting substrings using candidate boundaries produce chunks match requested chunk_size chunk_overlap ragnar_chunk() higher-level function , identifies boundaries extracts slices. need lower-level control, can alternatively use lower-level functions ragnar_segment() combination ragnar_chunk_segments(). ragnar_segment(): Splits text semantic boundaries. ragnar_chunk_segments(): Combines text segments chunks. usecases, two equivalent:   working data frames, functions preserve columns use tidyr::unchop() handle resulting list-columns simplify = TRUE.","code":"x |> ragnar_chunk() x |> ragnar_segment() |> ragnar_chunk_segments()"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chunk text — ragnar_chunk","text":"","code":"# Basic chunking with max size text <- \"This is a long piece of text. It has multiple sentences.          We want to split it into chunks. Here's another sentence.\" ragnar_chunk(text, max_size = 40) # splits at sentences #> [1] \"This is a long piece of text.\"    \"It has multiple sentences.\"       #> [3] \"We want to split it into chunks.\" \"Here's another sentence.\"          # smaller chunk size: first splits at sentence boundaries, then word boundaries ragnar_chunk(text, max_size = 20) #> [1] \"This is a long piece\" \"of text.\"             \"It has multiple\"      #> [4] \"sentences.\"           \"We want to split it\"  \"into chunks.\"         #> [7] \"Here's another\"       \"sentence.\"             # only split at sentence boundaries. Note, some chunks are oversized ragnar_chunk(text, max_size = 20, boundaries = c(\"sentence\")) #> [1] \"This is a long piece of text.\"    \"It has multiple sentences.\"       #> [3] \"We want to split it into chunks.\" \"Here's another sentence.\"          # only consider word boundaries when splitting: ragnar_chunk(text, max_size = 20, boundaries = c(\"word\")) #> [1] \"This is a long piece\" \"of text. It has\"      \"multiple sentences.\"  #> [4] \"We want to\"           \"split it into chunks\" \"s. Here's another\"    #> [7] \"sentence.\"             # first split at sentence boundaries, then word boundaries, # as needed to satisfy `max_chunk` ragnar_chunk(text, max_size = 20, boundaries = c(\"sentence\", \"word\")) #> [1] \"This is a long piece\" \"of text.\"             \"It has multiple\"      #> [4] \"sentences.\"           \"We want to split it\"  \"into chunks.\"         #> [7] \"Here's another\"       \"sentence.\"             # Use a stringr pattern to find semantic boundaries ragnar_chunk(text, max_size = 10, boundaries = stringr::fixed(\". \")) #> [1] \"This is a long piece of text.\"                                         #> [2] \"It has multiple sentences.\\n         We want to split it into chunks.\" #> [3] \"Here's another sentence.\"                                              ragnar_chunk(text, max_size = 10, boundaries = list(stringr::fixed(\". \"), \"word\")) #>  [1] \"This is a\"  \"long piece\" \"e of text.\" \"It has\"     \"multiple\"   #>  [6] \"sentences.\" \".\"          \"We want to\" \"o split it\" \"into\"       #> [11] \"chunks.\"    \"Here's\"     \"another\"    \"sentence.\"    # Working with data frames df <- data.frame(   id = 1:2,   text = c(\"First sentence. Second sentence.\", \"Another sentence here.\") ) ragnar_chunk(df, max_size = 20, boundaries = \"sentence\") #>   id                   text #> 1  1        First sentence. #> 2  1       Second sentence. #> 3  2 Another sentence here. ragnar_chunk(df$text, max_size = 20, boundaries = \"sentence\") #> [1] \"First sentence.\"        \"Second sentence.\"       \"Another sentence here.\"  # Chunking pre-segmented text segments <- c(\"First segment. \", \"Second segment. \", \"Third segment. \", \"Fourth segment. \") ragnar_chunk_segments(segments, max_size = 20) #> [1] \"First segment.\"  \"Second segment.\" \"Third segment.\"  \"Fourth segment.\" ragnar_chunk_segments(segments, max_size = 40) #> [1] \"First segment. Second segment.\" \"Third segment. Fourth segment.\" ragnar_chunk_segments(segments, max_size = 60) #> [1] \"First segment. Second segment. Third segment.\" #> [2] \"Fourth segment.\""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_find_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Find links on a page — ragnar_find_links","title":"Find links on a page — ragnar_find_links","text":"Find links page","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_find_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find links on a page — ragnar_find_links","text":"","code":"ragnar_find_links(   x,   depth = 0L,   children_only = TRUE,   progress = TRUE,   ...,   url_filter = identity )"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_find_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find links on a page — ragnar_find_links","text":"x URL, HTML file path, XML document. Markdown, convert HTML using commonmark::markdown_html() first. depth Integer specifying many levels deep crawl links. depth > 0, function follow child links (links x prefix) collect links pages well. children_only Logical string. TRUE, returns child links (x prefix). FALSE, returns links found page. Note regardless setting, child links followed depth > 0. progress Logical, draw progress bar depth > 0. separate progress bar drawn per recursion level. ... Currently unused. Must empty. url_filter function takes character vector URL's may subset return smaller list. can useful filtering URL's rules different children_only checks prefix.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_find_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find links on a page — ragnar_find_links","text":"character vector links page.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_find_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find links on a page — ragnar_find_links","text":"","code":"if (FALSE) { # \\dontrun{ ragnar_find_links(\"https://r4ds.hadley.nz/base-R.html\") ragnar_find_links(\"https://ellmer.tidyverse.org/\") ragnar_find_links(\"https://ellmer.tidyverse.org/\", depth = 2) ragnar_find_links(\"https://ellmer.tidyverse.org/\", depth = 2, children_only = FALSE) ragnar_find_links(   paste0(\"https://github.com/Snowflake-Labs/sfquickstarts/\",          \"tree/master/site/sfguides/src/build_a_custom_model_for_anomaly_detection\"),   children_only = \"https://github.com/Snowflake-Labs/sfquickstarts\",   depth = 1 ) } # }"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a document as Markdown — ragnar_read","title":"Read a document as Markdown — ragnar_read","text":"ragnar_read() uses markitdown convert document markdown. frame_by_tags split_by_tags provided, converted markdown content split converted data frame, otherwise, markdown returned string.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a document as Markdown — ragnar_read","text":"","code":"ragnar_read(x, ..., split_by_tags = NULL, frame_by_tags = NULL)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a document as Markdown — ragnar_read","text":"x file path url. ... passed markitdown.convert. split_by_tags character vector html tag names used split returned text frame_by_tags character vector html tag names used create dataframe returned content","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a document as Markdown — ragnar_read","text":"Always returns data frame columns: origin: file path url hash: hash text content text: markdown content split_by_tags NULL, tag column also included containing corresponding tag text chunk. \"\" used text chunks associated tag. frame_by_tags NULL, additional columns included tag frame_by_tags. text chunks associated tags order appear markdown content.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a document as Markdown — ragnar_read","text":"","code":"file <- tempfile(fileext = \".html\") download.file(\"https://r4ds.hadley.nz/base-R.html\", file, quiet = TRUE)  # with no arguments, returns a single row data frame. # the markdown content is in the `text` column. file |> ragnar_read() |> str() #> tibble [1 × 3] (S3: tbl_df/tbl/data.frame) #>  $ origin: chr \"/tmp/RtmpyUlmZ4/file1c4660a9f4a0.html\" #>  $ hash  : chr \"6710307a045529ca189f0f9b4c1de894\" #>  $ text  : 'glue' chr \"# 27  A field guide to base R – R for Data Science (2e)\\n\\n1. [Program](./program.html)\\n2. [27  A field guide \"| __truncated__  # use `split_by_tags` to get a data frame where the text is split by the # specified tags (e.g., \"h1\", \"h2\", \"h3\") file |>   ragnar_read(split_by_tags = c(\"h1\", \"h2\", \"h3\")) #> # A tibble: 37 × 4 #>    origin                                hash                        tag   text  #>    <chr>                                 <chr>                       <chr> <chr> #>  1 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"h1\"  \"# 2… #>  2 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"\"    \"1. … #>  3 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"h2\"  \"## … #>  4 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"\"    \"* [… #>  5 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"h1\"  \"# 2… #>  6 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"h2\"  \"## … #>  7 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"\"    \"To … #>  8 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"h3\"  \"###… #>  9 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"\"    \"Thi… #> 10 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529ca189f0f9b4c… \"h2\"  \"## … #> # ℹ 27 more rows  # use `frame_by_tags` to get a dataframe where the # headings associated with each text chunk are easily accessible file |>   ragnar_read(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) #> # A tibble: 18 × 6 #>    origin                                hash            h1    h2    h3    text  #>    <chr>                                 <chr>           <chr> <chr> <chr> <chr> #>  1 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… NA    NA    \"1. … #>  2 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## T… NA    \"* [… #>  3 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"To … #>  4 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"Thi… #>  5 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"`[`… #>  6 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"The… #>  7 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"The… #>  8 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"Sev… #>  9 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"1. … #> 10 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"`[`… #> 11 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"`[[… #> 12 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"The… #> 13 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"`[[… #> 14 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… ### … \"1. … #> 15 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"In … #> 16 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"`fo… #> 17 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"Man… #> 18 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a045529… # 27… ## 2… NA    \"In …  # use `split_by_tags` and `frame_by_tags` together to further break up `text`. file |>   ragnar_read(     split_by_tags = c(\"p\"),     frame_by_tags = c(\"h1\", \"h2\", \"h3\")   ) #> # A tibble: 164 × 7 #>    origin                                hash      h1    h2    h3    tag   text  #>    <chr>                                 <chr>     <chr> <chr> <chr> <chr> <chr> #>  1 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"\"    \"1. … #>  2 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"p\"   \"[R … #>  3 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"\"    \"*\"   #>  4 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"p\"   \"[We… #>  5 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"\"    \"*\"   #>  6 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"p\"   \"[Pr… #>  7 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"\"    \"*\"   #>  8 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"p\"   \"[In… #>  9 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"\"    \"*\"   #> 10 /tmp/RtmpyUlmZ4/file1c4660a9f4a0.html 6710307a… # 27… NA    NA    \"p\"   \"[Wh… #> # ℹ 154 more rows  # Example workflow adding context to each chunk file |>   ragnar_read(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) |>   glue::glue_data(r\"--(     ## Excerpt from the book \"R for Data Science (2e)\"     chapter: {h1}     section: {h2}     content: {text}      )--\") |>   # inspect   _[6:7] |> cat(sep = \"\\n~~~~~~~~~~~\\n\") #> ## Excerpt from the book \"R for Data Science (2e)\" #> chapter: # 27  A field guide to base R #> section: ## 27.2 Selecting multiple elements with `[` #> content: There are five main types of things that you can subset a vector with, i.e., that can be the `i` in `x[i]`: #>  #> 1. **A vector of positive integers**. Subsetting with positive integers keeps the elements at those positions: #>  #>    ``` #>    x <- c(\"one\", \"two\", \"three\", \"four\", \"five\") #>    x[c(3, 2, 5)] #>    #> [1] \"three\" \"two\"   \"five\" #>    ``` #>  #>    By repeating a position, you can actually make a longer output than input, making the term “subsetting” a bit of a misnomer. #>  #>    ``` #>    x[c(1, 1, 5, 5, 5, 2)] #>    #> [1] \"one\"  \"one\"  \"five\" \"five\" \"five\" \"two\" #>    ``` #> 2. **A vector of negative integers**. Negative values drop the elements at the specified positions: #>  #>    ``` #>    x[c(-1, -3, -5)] #>    #> [1] \"two\"  \"four\" #>    ``` #> 3. **A logical vector**. Subsetting with a logical vector keeps all values corresponding to a `TRUE` value. This is most often useful in conjunction with the comparison functions. #>  #>    ``` #>    x <- c(10, 3, NA, 5, 8, 1, NA) #>  #>    # All non-missing values of x #>    x[!is.na(x)] #>    #> [1] 10  3  5  8  1 #>  #>    # All even (or missing!) values of x #>    x[x %% 2 == 0] #>    #> [1] 10 NA  8 NA #>    ``` #>  #>    Unlike `[filter()](https://dplyr.tidyverse.org/reference/filter.html)`, `NA` indices will be included in the output as `NA`s. #> 4. **A character vector**. If you have a named vector, you can subset it with a character vector: #>  #>    ``` #>    x <- c(abc = 1, def = 2, xyz = 5) #>    x[c(\"xyz\", \"def\")] #>    #> xyz def #>    #>   5   2 #>    ``` #>  #>    As with subsetting with positive integers, you can use a character vector to duplicate individual entries. #> 5. **Nothing**. The final type of subsetting is nothing, `x[]`, which returns the complete `x`. This is not useful for subsetting vectors, but as we’ll see shortly, it is useful when subsetting 2d structures like tibbles. #>  #> ~~~~~~~~~~~ #> ## Excerpt from the book \"R for Data Science (2e)\" #> chapter: # 27  A field guide to base R #> section: ## 27.2 Selecting multiple elements with `[` #> content: There are quite a few different ways[1](#fn1) that you can use `[` with a data frame, but the most important way is to select rows and columns independently with `df[rows, cols]`. Here `rows` and `cols` are vectors as described above. For example, `df[rows, ]` and `df[, cols]` select just rows or just columns, using the empty subset to preserve the other dimension. #>  #> Here are a couple of examples: #>  #> ``` #> df <- tibble( #>   x = 1:3, #>   y = c(\"a\", \"e\", \"f\"), #>   z = runif(3) #> ) #>  #> # Select first row and second column #> df[1, 2] #> #> # A tibble: 1 × 1 #> #>   y #> #>   <chr> #> #> 1 a #>  #> # Select all rows and columns x and y #> df[, c(\"x\" , \"y\")] #> #> # A tibble: 3 × 2 #> #>       x y #> #>   <int> <chr> #> #> 1     1 a #> #> 2     2 e #> #> 3     3 f #>  #> # Select rows where `x` is greater than 1 and all columns #> df[df$x > 1, ] #> #> # A tibble: 2 × 3 #> #>       x y         z #> #>   <int> <chr> <dbl> #> #> 1     2 e     0.834 #> #> 2     3 f     0.601 #> ``` #>  #> We’ll come back to `$` shortly, but you should be able to guess what `df$x` does from the context: it extracts the `x` variable from `df`. We need to use it here because `[` doesn’t use tidy evaluation, so you need to be explicit about the source of the `x` variable. #>  #> There’s an important difference between tibbles and data frames when it comes to `[`. In this book, we’ve mainly used tibbles, which *are* data frames, but they tweak some behaviors to make your life a little easier. In most places, you can use “tibble” and “data frame” interchangeably, so when we want to draw particular attention to R’s built-in data frame, we’ll write `data.frame`. If `df` is a `data.frame`, then `df[, cols]` will return a vector if `col` selects a single column and a data frame if it selects more than one column. If `df` is a tibble, then `[` will always return a tibble. #>  #> ``` #> df1 <- data.frame(x = 1:3) #> df1[, \"x\"] #> #> [1] 1 2 3 #>  #> df2 <- tibble(x = 1:3) #> df2[, \"x\"] #> #> # A tibble: 3 × 1 #> #>       x #> #>   <int> #> #> 1     1 #> #> 2     2 #> #> 3     3 #> ``` #>  #> One way to avoid this ambiguity with `data.frame`s is to explicitly specify `drop = FALSE`: #>  #> ``` #> df1[, \"x\" , drop = FALSE] #> #>   x #> #> 1 1 #> #> 2 2 #> #> 3 3 #> ``` #>   # Advanced example of postprocessing the output of ragnar_read() # to add language to code blocks, markdown style library(dplyr, warn.conflicts = FALSE) library(stringr) library(rvest) library(xml2) file |>   ragnar_read(frame_by_tags = c(\"h1\", \"h2\", \"h3\"),               split_by_tags = c(\"p\", \"pre\")) |>   mutate(     is_code = tag == \"pre\",     text = ifelse(is_code, str_replace(text, \"```\", \"```r\"), text)   ) |>   group_by(h1, h2, h3) |>   summarise(text = str_flatten(text, \"\\n\\n\"), .groups = \"drop\") |>   glue::glue_data(r\"--(     # Excerpt from the book \"R for Data Science (2e)\"     chapter: {h1}     section: {h2}     content: {text}      )--\") |>   # inspect   _[9:10] |> cat(sep = \"\\n~~~~~~~~~~~\\n\") #> # Excerpt from the book \"R for Data Science (2e)\" #> chapter: # 27  A field guide to base R #> section: ## 27.3 Selecting a single element with `$` and `[[` #> content: There are a couple of important differences between tibbles and base `data.frame`s when it comes to `$`. Data frames match the prefix of any variable names (so-called **partial matching**) and don’t complain if a column doesn’t exist: #>  #> ```r #> df <- data.frame(x1 = 1) #> df$x #> #> [1] 1 #> df$z #> #> NULL #> ``` #>  #> Tibbles are more strict: they only ever match variable names exactly and they will generate a warning if the column you are trying to access doesn’t exist: #>  #> ```r #> tb <- tibble(x1 = 1) #>  #> tb$x #> #> Warning: Unknown or uninitialised column: `x`. #> #> NULL #> tb$z #> #> Warning: Unknown or uninitialised column: `z`. #> #> NULL #> ``` #>  #> For this reason we sometimes joke that tibbles are lazy and surly: they do less and complain more. #>  #> ~~~~~~~~~~~ #> # Excerpt from the book \"R for Data Science (2e)\" #> chapter: # 27  A field guide to base R #> section: ## 27.3 Selecting a single element with `$` and `[[` #> content: `[[` and `$` are also really important for working with lists, and it’s important to understand how they differ from `[`. Let’s illustrate the differences with a list named `l`: #>  #> ```r #> l <- list( #>   a = 1:3, #>   b = \"a string\", #>   c = pi, #>   d = list(-1, -5) #> ) #> ``` #>  #> * #>  #> `[` extracts a sub-list. It doesn’t matter how many elements you extract, the result will always be a list. #>  #> ```r #>   str(l[1:2]) #>   #> List of 2 #>   #>  $ a: int [1:3] 1 2 3 #>   #>  $ b: chr \"a string\" #>  #>   str(l[1]) #>   #> List of 1 #>   #>  $ a: int [1:3] 1 2 3 #>  #>   str(l[4]) #>   #> List of 1 #>   #>  $ d:List of 2 #>   #>   ..$ : num -1 #>   #>   ..$ : num -5 #>   ``` #>  #> Like with vectors, you can subset with a logical, integer, or character vector. #>  #> * #>  #> `[[` and `$` extract a single component from a list. They remove a level of hierarchy from the list. #>  #> ```r #>   str(l[[1]]) #>   #>  int [1:3] 1 2 3 #>  #>   str(l[[4]]) #>   #> List of 2 #>   #>  $ : num -1 #>   #>  $ : num -5 #>  #>   str(l$a) #>   #>  int [1:3] 1 2 3 #>   ``` #>  #> The difference between `[` and `[[` is particularly important for lists because `[[` drills down into the list while `[` returns a new, smaller list. To help you remember the difference, take a look at the unusual pepper shaker shown in [Figure 27.1](#fig-pepper). If this pepper shaker is your list `pepper`, then, `pepper[1]` is a pepper shaker containing a single pepper packet. `pepper[2]` would look the same, but would contain the second packet. `pepper[1:2]` would be a pepper shaker containing two pepper packets. `pepper[[1]]` would extract the pepper packet itself. #>  #> ![Three photos. On the left is a photo of a glass pepper shaker. Instead of  the pepper shaker containing pepper, it contains a single packet of pepper. In the middle is a photo of a single packet of pepper. On the right is a  photo of the contents of a packet of pepper.](diagrams/pepper.png) #>  #> Figure 27.1: (Left) A pepper shaker that Hadley once found in his hotel room. (Middle) `pepper[1]`. (Right) `pepper[[1]]` #>  #> This same principle applies when you use 1d `[` with a data frame: `df[\"x\"]` returns a one-column data frame and `df[[\"x\"]]` returns a vector. #>"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an HTML document — ragnar_read_document","title":"Read an HTML document — ragnar_read_document","text":"Read HTML document","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an HTML document — ragnar_read_document","text":"","code":"ragnar_read_document(   x,   ...,   split_by_tags = frame_by_tags,   frame_by_tags = NULL )"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an HTML document — ragnar_read_document","text":"x file path url, passed rvest::read_html(), xml_node. ... passed rvest::read_html() split_by_tags character vector html tag names used split returned text frame_by_tags character vector html tag names used create dataframe returned content","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an HTML document — ragnar_read_document","text":"frame_by_tags NULL, data frame returned, column names c(\"frame_by_tags\", \"text\"). frame_by_tags NULL split_by_tags NULL, named character vector returned. frame_by_tags split_by_tags NULL, string (length-1 character vector) returned.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_read_document.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an HTML document — ragnar_read_document","text":"","code":"file <- tempfile(fileext = \".html\") download.file(\"https://r4ds.hadley.nz/base-R.html\", file, quiet = TRUE)  # with no arguments, returns a single string of the text. file |> ragnar_read_document() |> str() #>  chr \"Program\\n27 A field guide to base R\\nR for Data Science (2e)\\nWelcome\\nPreface to the second edition\\nIntroduct\"| __truncated__  # use `split_by_tags` to get a named character vector of length > 1 file |>   ragnar_read_document(split_by_tags = c(\"h1\", \"h2\", \"h3\")) |>   tibble::enframe(\"tag\", \"text\") #> # A tibble: 36 × 2 #>    tag   text                                                                    #>    <chr> <chr>                                                                   #>  1 \"\"    \"Program\\n27 A field guide to base R\\nR for Data Science (2e)\\nWelcome… #>  2 \"h2\"  \"Table of contents\"                                                     #>  3 \"\"    \"27.1 Introduction\\n27.1.1 Prerequisites\\n27.2 Selecting multiple elem… #>  4 \"h1\"  \"27 A field guide to base R\"                                            #>  5 \"h2\"  \"27.1 Introduction\"                                                     #>  6 \"\"    \"To finish off the programming section, we’re going to give you a quic… #>  7 \"h3\"  \"27.1.1 Prerequisites\"                                                  #>  8 \"\"    \"This package focuses on base R so doesn’t have any real prerequisites… #>  9 \"h2\"  \"27.2 Selecting multiple elements with [\"                               #> 10 \"\"    \"[ is used to extract sub-components from vectors and data frames, and… #> # ℹ 26 more rows  # use `frame_by_tags` to get a dataframe where the # headings associated with each text chunk are easily accessible file |>   ragnar_read_document(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) #> # A tibble: 18 × 4 #>    h1                         h2                                     h3    text  #>    <chr>                      <chr>                                  <chr> <chr> #>  1 NA                         NA                                     NA    \"Pro… #>  2 NA                         Table of contents                      NA    \"27.… #>  3 27 A field guide to base R 27.1 Introduction                      NA    \"To … #>  4 27 A field guide to base R 27.1 Introduction                      27.1… \"Thi… #>  5 27 A field guide to base R 27.2 Selecting multiple elements with… NA    \"[ i… #>  6 27 A field guide to base R 27.2 Selecting multiple elements with… 27.2… \"The… #>  7 27 A field guide to base R 27.2 Selecting multiple elements with… 27.2… \"The… #>  8 27 A field guide to base R 27.2 Selecting multiple elements with… 27.2… \"Sev… #>  9 27 A field guide to base R 27.2 Selecting multiple elements with… 27.2… \"Cre… #> 10 27 A field guide to base R 27.3 Selecting a single element with … NA    \"[, … #> 11 27 A field guide to base R 27.3 Selecting a single element with … 27.3… \"[[ … #> 12 27 A field guide to base R 27.3 Selecting a single element with … 27.3… \"The… #> 13 27 A field guide to base R 27.3 Selecting a single element with … 27.3… \"[[ … #> 14 27 A field guide to base R 27.3 Selecting a single element with … 27.3… \"Wha… #> 15 27 A field guide to base R 27.4 Apply family                      NA    \"In … #> 16 27 A field guide to base R 27.5 for loops                         NA    \"for… #> 17 27 A field guide to base R 27.6 Plots                             NA    \"Man… #> 18 27 A field guide to base R 27.7 Summary                           NA    \"In …  # use `split_by_tags` and `frame_by_tags` together to further break up `text`. file |>   ragnar_read_document(     split_by_tags = c(\"p\"),     frame_by_tags = c(\"h1\", \"h2\", \"h3\")   ) #> # A tibble: 117 × 5 #>    h1                         h2                               h3    tag   text  #>    <chr>                      <chr>                            <chr> <chr> <chr> #>  1 NA                         NA                               NA    \"\"    \"Pro… #>  2 NA                         Table of contents                NA    \"\"    \"27.… #>  3 27 A field guide to base R 27.1 Introduction                NA    \"p\"   \"To … #>  4 27 A field guide to base R 27.1 Introduction                NA    \"p\"   \"Thi… #>  5 27 A field guide to base R 27.1 Introduction                NA    \"p\"   \"Aft… #>  6 27 A field guide to base R 27.1 Introduction                NA    \"p\"   \"In … #>  7 27 A field guide to base R 27.1 Introduction                27.1… \"p\"   \"Thi… #>  8 27 A field guide to base R 27.1 Introduction                27.1… \"\"    \"lib… #>  9 27 A field guide to base R 27.2 Selecting multiple element… NA    \"p\"   \"[ i… #> 10 27 A field guide to base R 27.2 Selecting multiple element… 27.2… \"p\"   \"The… #> # ℹ 107 more rows  # Example workflow adding context to each chunk file |>   ragnar_read_document(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) |>   glue::glue_data(r\"--(     ## Excerpt from the book \"R for Data Science (2e)\"     chapter: {h1}     section: {h2}     content: {text}      )--\") |>     # inspect     _[6:7] |> cat(sep = \"\\n~~~~~~~~~~~\\n\") #> ## Excerpt from the book \"R for Data Science (2e)\" #> chapter: 27 A field guide to base R #> section: 27.2 Selecting multiple elements with [ #> content: There are five main types of things that you can subset a vector with, i.e., that can be the i in x[i]: #>  #> A vector of positive integers. Subsetting with positive integers keeps the elements at those positions: #>  #> x <- c(\"one\", \"two\", \"three\", \"four\", \"five\") #> x[c(3, 2, 5)] #> #> [1] \"three\" \"two\"   \"five\" #>  #> By repeating a position, you can actually make a longer output than input, making the term “subsetting” a bit of a misnomer. #>  #> x[c(1, 1, 5, 5, 5, 2)] #> #> [1] \"one\"  \"one\"  \"five\" \"five\" \"five\" \"two\" #>  #> A vector of negative integers. Negative values drop the elements at the specified positions: #>  #> x[c(-1, -3, -5)] #> #> [1] \"two\"  \"four\" #>  #> A logical vector. Subsetting with a logical vector keeps all values corresponding to a TRUE value. This is most often useful in conjunction with the comparison functions. #>  #> x <- c(10, 3, NA, 5, 8, 1, NA) #>  #> # All non-missing values of x #> x[!is.na(x)] #> #> [1] 10  3  5  8  1 #>  #> # All even (or missing!) values of x #> x[x %% 2 == 0] #> #> [1] 10 NA  8 NA #>  #> Unlike filter(), NA indices will be included in the output as NAs. #>  #> A character vector. If you have a named vector, you can subset it with a character vector: #>  #> x <- c(abc = 1, def = 2, xyz = 5) #> x[c(\"xyz\", \"def\")] #> #> xyz def  #> #>   5   2 #>  #> As with subsetting with positive integers, you can use a character vector to duplicate individual entries. #>  #> Nothing. The final type of subsetting is nothing, x[], which returns the complete x. This is not useful for subsetting vectors, but as we’ll see shortly, it is useful when subsetting 2d structures like tibbles. #>  #> ~~~~~~~~~~~ #> ## Excerpt from the book \"R for Data Science (2e)\" #> chapter: 27 A field guide to base R #> section: 27.2 Selecting multiple elements with [ #> content: There are quite a few different ways1 that you can use [ with a data frame, but the most important way is to select rows and columns independently with df[rows, cols]. Here rows and cols are vectors as described above. For example, df[rows, ] and df[, cols] select just rows or just columns, using the empty subset to preserve the other dimension. #>  #> Here are a couple of examples: #>  #> df <- tibble( #>   x = 1:3,  #>   y = c(\"a\", \"e\", \"f\"),  #>   z = runif(3) #> ) #>  #> # Select first row and second column #> df[1, 2] #> #> # A tibble: 1 × 1 #> #>   y     #> #>   <chr> #> #> 1 a #>  #> # Select all rows and columns x and y #> df[, c(\"x\" , \"y\")] #> #> # A tibble: 3 × 2 #> #>       x y     #> #>   <int> <chr> #> #> 1     1 a     #> #> 2     2 e     #> #> 3     3 f #>  #> # Select rows where `x` is greater than 1 and all columns #> df[df$x > 1, ] #> #> # A tibble: 2 × 3 #> #>       x y         z #> #>   <int> <chr> <dbl> #> #> 1     2 e     0.834 #> #> 2     3 f     0.601 #>  #> We’ll come back to $ shortly, but you should be able to guess what df$x does from the context: it extracts the x variable from df. We need to use it here because [ doesn’t use tidy evaluation, so you need to be explicit about the source of the x variable. #>  #> There’s an important difference between tibbles and data frames when it comes to [. In this book, we’ve mainly used tibbles, which are data frames, but they tweak some behaviors to make your life a little easier. In most places, you can use “tibble” and “data frame” interchangeably, so when we want to draw particular attention to R’s built-in data frame, we’ll write data.frame. If df is a data.frame, then df[, cols] will return a vector if col selects a single column and a data frame if it selects more than one column. If df is a tibble, then [ will always return a tibble. #>  #> df1 <- data.frame(x = 1:3) #> df1[, \"x\"] #> #> [1] 1 2 3 #>  #> df2 <- tibble(x = 1:3) #> df2[, \"x\"] #> #> # A tibble: 3 × 1 #> #>       x #> #>   <int> #> #> 1     1 #> #> 2     2 #> #> 3     3 #>  #> One way to avoid this ambiguity with data.frames is to explicitly specify drop = FALSE: #>  #> df1[, \"x\" , drop = FALSE] #> #>   x #> #> 1 1 #> #> 2 2 #> #> 3 3 #>   # Advanced example of postprocessing the output of ragnar_read_document() # to wrap code blocks in backticks, markdown style library(dplyr, warn.conflicts = FALSE) library(stringr) library(rvest) library(xml2) file |>   ragnar_read_document(frame_by_tags = c(\"h1\", \"h2\", \"h3\"),                        split_by_tags = c(\"p\", \"pre\")) |>   mutate(     is_code = tag == \"pre\",     text = ifelse(is_code,                   str_c(\"```\", text, \"```\", sep = \"\\n\"),                   text)) |>   group_by(h1, h2, h3) |>   summarise(text = str_flatten(text, \"\\n\"), .groups = \"drop\") |>   glue::glue_data(r\"--(     # Excerpt from the book \"R for Data Science (2e)\"     chapter: {h1}     section: {h2}     content: {text}      )--\") |>     # inspect     _[9:10] |> cat(sep = \"\\n~~~~~~~~~~~\\n\") #> # Excerpt from the book \"R for Data Science (2e)\" #> chapter: 27 A field guide to base R #> section: 27.3 Selecting a single element with $ and [[ #> content: There are a couple of important differences between tibbles and base data.frames when it comes to $. Data frames match the prefix of any variable names (so-called partial matching) and don’t complain if a column doesn’t exist: #> ``` #> df <- data.frame(x1 = 1) #> df$x #> #> [1] 1 #> df$z #> #> NULL #> ``` #> Tibbles are more strict: they only ever match variable names exactly and they will generate a warning if the column you are trying to access doesn’t exist: #> ``` #> tb <- tibble(x1 = 1) #>  #> tb$x #> #> Warning: Unknown or uninitialised column: `x`. #> #> NULL #> tb$z #> #> Warning: Unknown or uninitialised column: `z`. #> #> NULL #> ``` #> For this reason we sometimes joke that tibbles are lazy and surly: they do less and complain more. #>  #> ~~~~~~~~~~~ #> # Excerpt from the book \"R for Data Science (2e)\" #> chapter: 27 A field guide to base R #> section: 27.3 Selecting a single element with $ and [[ #> content: [[ and $ are also really important for working with lists, and it’s important to understand how they differ from [. Let’s illustrate the differences with a list named l: #> ``` #> l <- list( #>   a = 1:3,  #>   b = \"a string\",  #>   c = pi,  #>   d = list(-1, -5) #> ) #> ``` #> [ extracts a sub-list. It doesn’t matter how many elements you extract, the result will always be a list. #> ``` #> str(l[1:2]) #> #> List of 2 #> #>  $ a: int [1:3] 1 2 3 #> #>  $ b: chr \"a string\" #>  #> str(l[1]) #> #> List of 1 #> #>  $ a: int [1:3] 1 2 3 #>  #> str(l[4]) #> #> List of 1 #> #>  $ d:List of 2 #> #>   ..$ : num -1 #> #>   ..$ : num -5 #> ``` #> Like with vectors, you can subset with a logical, integer, or character vector. #> [[ and $ extract a single component from a list. They remove a level of hierarchy from the list. #> ``` #> str(l[[1]]) #> #>  int [1:3] 1 2 3 #>  #> str(l[[4]]) #> #> List of 2 #> #>  $ : num -1 #> #>  $ : num -5 #>  #> str(l$a) #> #>  int [1:3] 1 2 3 #> ``` #> The difference between [ and [[ is particularly important for lists because [[ drills down into the list while [ returns a new, smaller list. To help you remember the difference, take a look at the unusual pepper shaker shown in Figure 27.1. If this pepper shaker is your list pepper, then, pepper[1] is a pepper shaker containing a single pepper packet. pepper[2] would look the same, but would contain the second packet. pepper[1:2] would be a pepper shaker containing two pepper packets. pepper[[1]] would extract the pepper packet itself. #> Figure 27.1: (Left) A pepper shaker that Hadley once found in his hotel room. (Middle) pepper[1]. (Right) pepper[[1]] #> This same principle applies when you use 1d [ with a data frame: df[\"x\"] returns a one-column data frame and df[[\"x\"]] returns a vector. #>   # Example of preprocessing the input to ragnar_read_document() # to wrap code in backticks, markdown style # same outcome as above, except via pre processing instead of post processing. file |>   read_html() |>   (\\(doc) {     # fence preformatted code with triple backticks     for (node in html_elements(doc, \"pre\")) {       xml_add_child(node, \"code\", \"```\\n\", .where = 0)       xml_add_child(node, \"code\", \"\\n```\")     }     # wrap inline code with single backticks     for (node in html_elements(doc, \"code\")) {       if (!\"pre\" %in% xml_name(xml_parents(node))) {         xml_text(node) <- str_c(\"`\", xml_text(node), \"`\")       }     }     doc   })() |>   ragnar_read_document(frame_by_tags = c(\"h1\", \"h2\", \"h3\")) |>   glue::glue_data(r\"--(     # Excerpt from the book \"R for Data Science (2e)\"     chapter: {h1}     section: {h2}     content: {text}      )--\") |> _[6] #> # Excerpt from the book \"R for Data Science (2e)\" #> chapter: 27 A field guide to base R #> section: 27.2 Selecting multiple elements with `[` #> content: There are five main types of things that you can subset a vector with, i.e., that can be the `i` in `x[i]`: #>  #> A vector of positive integers. Subsetting with positive integers keeps the elements at those positions: #>  #> ``` #> x <- c(\"one\", \"two\", \"three\", \"four\", \"five\") #> x[c(3, 2, 5)] #> #> [1] \"three\" \"two\"   \"five\" #> ``` #>  #> By repeating a position, you can actually make a longer output than input, making the term “subsetting” a bit of a misnomer. #>  #> ``` #> x[c(1, 1, 5, 5, 5, 2)] #> #> [1] \"one\"  \"one\"  \"five\" \"five\" \"five\" \"two\" #> ``` #>  #> A vector of negative integers. Negative values drop the elements at the specified positions: #>  #> ``` #> x[c(-1, -3, -5)] #> #> [1] \"two\"  \"four\" #> ``` #>  #> A logical vector. Subsetting with a logical vector keeps all values corresponding to a `TRUE` value. This is most often useful in conjunction with the comparison functions. #>  #> ``` #> x <- c(10, 3, NA, 5, 8, 1, NA) #>  #> # All non-missing values of x #> x[!is.na(x)] #> #> [1] 10  3  5  8  1 #>  #> # All even (or missing!) values of x #> x[x %% 2 == 0] #> #> [1] 10 NA  8 NA #> ``` #>  #> Unlike `filter()`, `NA` indices will be included in the output as `NA`s. #>  #> A character vector. If you have a named vector, you can subset it with a character vector: #>  #> ``` #> x <- c(abc = 1, def = 2, xyz = 5) #> x[c(\"xyz\", \"def\")] #> #> xyz def  #> #>   5   2 #> ``` #>  #> As with subsetting with positive integers, you can use a character vector to duplicate individual entries. #>  #> Nothing. The final type of subsetting is nothing, `x[]`, which returns the complete `x`. This is not useful for subsetting vectors, but as we’ll see shortly, it is useful when subsetting 2d structures like tibbles. #>"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_register_tool_retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a 'retrieve' tool with ellmer — ragnar_register_tool_retrieve","title":"Register a 'retrieve' tool with ellmer — ragnar_register_tool_retrieve","text":"Register 'retrieve' tool ellmer","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_register_tool_retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a 'retrieve' tool with ellmer — ragnar_register_tool_retrieve","text":"","code":"ragnar_register_tool_retrieve(   chat,   store,   store_description = \"the knowledge store\",   ... )"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_register_tool_retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a 'retrieve' tool with ellmer — ragnar_register_tool_retrieve","text":"chat ellmer:::Chat object. store string store location, RagnarStore object. store_description Optional string, used composing tool description. ... arguments passed ragnar_retrieve().","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_register_tool_retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a 'retrieve' tool with ellmer — ragnar_register_tool_retrieve","text":"chat, invisibly.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_register_tool_retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a 'retrieve' tool with ellmer — ragnar_register_tool_retrieve","text":"","code":"if (FALSE) { # (file.exists(\"r4ds.ragnar.duckdb\") && Sys.getenv(\"OPENAI_API_KEY\") != \"\") } if (FALSE) { # file.exists(\"r4ds.ragnar.duckdb\") && Sys.getenv(\"OPENAI_API_KEY\") != \"\"  system_prompt <- stringr::str_squish(\"   You are an expert assistant in R programming.   When responding, you first quote relevant material from books or documentation,   provide links to the sources, and then add your own context and interpretation. \") chat <- ellmer::chat_openai(system_prompt, model = \"gpt-4o\")  store <- ragnar_store_connect(\"r4ds.ragnar.duckdb\", read_only = TRUE) ragnar_register_tool_retrieve(chat, store) chat$chat(\"How can I subset a dataframe?\") }"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chunks from a RagnarStore — ragnar_retrieve","title":"Retrieve chunks from a RagnarStore — ragnar_retrieve","text":"ragnar_retrieve() thin wrapper around ragnar_retrieve_vss_and_bm25() using recommended best practices.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chunks from a RagnarStore — ragnar_retrieve","text":"","code":"ragnar_retrieve(store, text, top_k = 3L)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chunks from a RagnarStore — ragnar_retrieve","text":"store RagnarStore object dplyr::tbl() derived . pass tbl, may use usual dplyr verbs (e.g. filter(), slice()) restrict rows examined similarity scoring. Avoid dropping essential columns text, embedding, origin, hash. text string find nearest match top_k Integer, number nearest entries find per method.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chunks from a RagnarStore — ragnar_retrieve","text":"dataframe retrieved chunks. row corresponds individual chunk store. always contains column named text contains chunks.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve.html","id":"pre-filtering-with-dplyr","dir":"Reference","previous_headings":"","what":"Pre-filtering with dplyr","title":"Retrieve chunks from a RagnarStore — ragnar_retrieve","text":"store behaves like lazy table backed DuckDB, row‑wise filtering executed directly database. lets narrow search space efficiently without pulling data R.","code":""},{"path":[]},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chunks from a RagnarStore — ragnar_retrieve","text":"","code":"# Basic usage mock_embed <- function(x) matrix(stats::runif(10), nrow = length(x), ncol = 10) store <- ragnar_store_create(embed = mock_embed) ragnar_store_insert(store, data.frame(text = c(\"foo\", \"bar\"))) ragnar_store_build_index(store) ragnar_retrieve(store, \"foo\") #> # A tibble: 2 × 6 #>      id origin hash                             text  cosine_distance   bm25 #>   <int> <chr>  <chr>                            <chr>           <dbl>  <dbl> #> 1     2 NA     9f154be5a85276c7506e6553247c2c80 bar             0.232 NA     #> 2     1 NA     c1562fbd8fd449ea1c841e1688fabe2a foo             0.269  0.301  # More Advanced: store metadata, retrieve with pre-filtering store <- ragnar_store_create(   embed = mock_embed,   extra_cols = data.frame(category = character()) ) ragnar_store_insert(   store,   data.frame(     category = c(\"desert\", \"desert\", \"desert\", \"meal\", \"meal\", \"meal\"),     text = c(\"ice cream\", \"cake\", \"cookies\", \"pasta\", \"burger\", \"salad\")   ) ) ragnar_store_build_index(store)  # simple retrieve ragnar_retrieve(store, \"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text    cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>             <dbl> #> 1     5 meal     NA     3d59d8377de9154b8fa040e68aa6b197 burger           0.0907 #> 2     1 desert   NA     68e1d6a6cc354e3e99ae4b78c577eb29 ice cr…          0.118  #> 3     4 meal     NA     f52c971e2e05ea580f5dec52255c4070 pasta            0.132   # retrieve with pre-filtering dplyr::tbl(store) |>   dplyr::filter(category == \"meal\") |>   ragnar_retrieve(\"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text   cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>            <dbl> #> 1     5 meal     NA     3d59d8377de9154b8fa040e68aa6b197 burger           0.203 #> 2     4 meal     NA     f52c971e2e05ea580f5dec52255c4070 pasta            0.204 #> 3     6 meal     NA     549caee504d74c3dbec40909849957c3 salad            0.320"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"BM25 refers Okapi Best Matching 25. See doi:10.1561/1500000019  information.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"","code":"ragnar_retrieve_bm25(store, text, top_k = 3L)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"store RagnarStore object dplyr::tbl() derived . pass tbl, may use usual dplyr verbs (e.g. filter(), slice()) restrict rows examined similarity scoring. Avoid dropping essential columns text, embedding, origin, hash. text string find nearest match top_k Integer, maximum amount document chunks retrieve","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"dataframe retrieved chunks. row corresponds individual chunk store. always contains column named text contains chunks.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"supported methods : cosine_distance: Measures dissimilarity two vectors based cosine angle . Defined \\(1 - cos(\\theta)\\), \\(cos(\\theta)\\) cosine similarity. cosine_similarity: Measures similarity two vectors based cosine angle . Ranges -1 (opposite) 1 (identical), 0 indicating orthogonality. euclidean_distance: Computes straight-line (L2) distance two points multidimensional space. Defined \\(\\sqrt{\\sum(x_i - y_i)^2}\\). dot_product: Computes sum element-wise products two vectors. negative_dot_product: negation dot product.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":"pre-filtering-with-dplyr","dir":"Reference","previous_headings":"","what":"Pre-filtering with dplyr","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"store behaves like lazy table backed DuckDB, row‑wise filtering executed directly database. lets narrow search space efficiently without pulling data R.","code":""},{"path":[]},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_bm25.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves chunks using the BM25 score — ragnar_retrieve_bm25","text":"","code":"# Basic usage mock_embed <- function(x) matrix(stats::runif(10), nrow = length(x), ncol = 10) store <- ragnar_store_create(embed = mock_embed) ragnar_store_insert(store, data.frame(text = c(\"foo\", \"bar\"))) ragnar_store_build_index(store) ragnar_retrieve(store, \"foo\") #> # A tibble: 2 × 6 #>      id origin hash                             text  cosine_distance   bm25 #>   <int> <chr>  <chr>                            <chr>           <dbl>  <dbl> #> 1     1 NA     c1562fbd8fd449ea1c841e1688fabe2a foo             0.145  0.301 #> 2     2 NA     9f154be5a85276c7506e6553247c2c80 bar             0.192 NA      # More Advanced: store metadata, retrieve with pre-filtering store <- ragnar_store_create(   embed = mock_embed,   extra_cols = data.frame(category = character()) ) ragnar_store_insert(   store,   data.frame(     category = c(\"desert\", \"desert\", \"desert\", \"meal\", \"meal\", \"meal\"),     text = c(\"ice cream\", \"cake\", \"cookies\", \"pasta\", \"burger\", \"salad\")   ) ) ragnar_store_build_index(store)  # simple retrieve ragnar_retrieve(store, \"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text    cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>             <dbl> #> 1     2 desert   NA     ea07293e8d96e6c01d5744d969ca7e46 cake              0.152 #> 2     6 meal     NA     549caee504d74c3dbec40909849957c3 salad             0.169 #> 3     1 desert   NA     68e1d6a6cc354e3e99ae4b78c577eb29 ice cr…           0.200  # retrieve with pre-filtering dplyr::tbl(store) |>   dplyr::filter(category == \"meal\") |>   ragnar_retrieve(\"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text   cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>            <dbl> #> 1     6 meal     NA     549caee504d74c3dbec40909849957c3 salad           0.0627 #> 2     5 meal     NA     3d59d8377de9154b8fa040e68aa6b197 burger          0.0730 #> 3     4 meal     NA     f52c971e2e05ea580f5dec52255c4070 pasta           0.111"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses vector similarity search — ragnar_retrieve_vss","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"Computes similarity measure query documents embeddings uses similarity rank documents.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"","code":"ragnar_retrieve_vss(   store,   text,   top_k = 3L,   method = c(\"cosine_distance\", \"cosine_similarity\", \"euclidean_distance\", \"dot_product\",     \"negative_dot_product\") )"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"store RagnarStore object dplyr::tbl() derived . pass tbl, may use usual dplyr verbs (e.g. filter(), slice()) restrict rows examined similarity scoring. Avoid dropping essential columns text, embedding, origin, hash. text string find nearest match top_k Integer, maximum amount document chunks retrieve method string specifying method used compute similarity query document chunks embeddings store database.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"dataframe retrieved chunks. row corresponds individual chunk store. always contains column named text contains chunks.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"supported methods : cosine_distance: Measures dissimilarity two vectors based cosine angle . Defined \\(1 - cos(\\theta)\\), \\(cos(\\theta)\\) cosine similarity. cosine_similarity: Measures similarity two vectors based cosine angle . Ranges -1 (opposite) 1 (identical), 0 indicating orthogonality. euclidean_distance: Computes straight-line (L2) distance two points multidimensional space. Defined \\(\\sqrt{\\sum(x_i - y_i)^2}\\). dot_product: Computes sum element-wise products two vectors. negative_dot_product: negation dot product.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":"pre-filtering-with-dplyr","dir":"Reference","previous_headings":"","what":"Pre-filtering with dplyr","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"store behaves like lazy table backed DuckDB, row‑wise filtering executed directly database. lets narrow search space efficiently without pulling data R.","code":""},{"path":[]},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uses vector similarity search — ragnar_retrieve_vss","text":"","code":"# Basic usage mock_embed <- function(x) matrix(stats::runif(10), nrow = length(x), ncol = 10) store <- ragnar_store_create(embed = mock_embed) ragnar_store_insert(store, data.frame(text = c(\"foo\", \"bar\"))) ragnar_store_build_index(store) ragnar_retrieve(store, \"foo\") #> # A tibble: 2 × 6 #>      id origin hash                             text  cosine_distance   bm25 #>   <int> <chr>  <chr>                            <chr>           <dbl>  <dbl> #> 1     2 NA     9f154be5a85276c7506e6553247c2c80 bar             0.101 NA     #> 2     1 NA     c1562fbd8fd449ea1c841e1688fabe2a foo             0.105  0.301  # More Advanced: store metadata, retrieve with pre-filtering store <- ragnar_store_create(   embed = mock_embed,   extra_cols = data.frame(category = character()) ) ragnar_store_insert(   store,   data.frame(     category = c(\"desert\", \"desert\", \"desert\", \"meal\", \"meal\", \"meal\"),     text = c(\"ice cream\", \"cake\", \"cookies\", \"pasta\", \"burger\", \"salad\")   ) ) ragnar_store_build_index(store)  # simple retrieve ragnar_retrieve(store, \"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text    cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>             <dbl> #> 1     5 meal     NA     3d59d8377de9154b8fa040e68aa6b197 burger            0.174 #> 2     3 desert   NA     a1c54a4f1d87aee9aaa3e0905538cbfe cookies           0.182 #> 3     2 desert   NA     ea07293e8d96e6c01d5744d969ca7e46 cake              0.188  # retrieve with pre-filtering dplyr::tbl(store) |>   dplyr::filter(category == \"meal\") |>   ragnar_retrieve(\"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text   cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>            <dbl> #> 1     5 meal     NA     3d59d8377de9154b8fa040e68aa6b197 burger           0.104 #> 2     4 meal     NA     f52c971e2e05ea580f5dec52255c4070 pasta            0.152 #> 3     6 meal     NA     549caee504d74c3dbec40909849957c3 salad            0.202"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"Runs ragnar_retrieve_vss() ragnar_retrieve_bm25() get distinct documents.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"","code":"ragnar_retrieve_vss_and_bm25(store, text, top_k = 3, ...)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"store RagnarStore object dplyr::tbl() derived . pass tbl, may use usual dplyr verbs (e.g. filter(), slice()) restrict rows examined similarity scoring. Avoid dropping essential columns text, embedding, origin, hash. text string find nearest match top_k Integer, number entries retrieve using per method. ... Forwarded ragnar_retrieve_vss()","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"dataframe retrieved chunks. row corresponds individual chunk store. always contains column named text contains chunks.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"results re-ranked identifying unique values.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":"pre-filtering-with-dplyr","dir":"Reference","previous_headings":"","what":"Pre-filtering with dplyr","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"store behaves like lazy table backed DuckDB, row‑wise filtering executed directly database. lets narrow search space efficiently without pulling data R.","code":""},{"path":[]},{"path":"https://ragnar.tidyverse.org/reference/ragnar_retrieve_vss_and_bm25.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve VSS and BM25 — ragnar_retrieve_vss_and_bm25","text":"","code":"# Basic usage mock_embed <- function(x) matrix(stats::runif(10), nrow = length(x), ncol = 10) store <- ragnar_store_create(embed = mock_embed) ragnar_store_insert(store, data.frame(text = c(\"foo\", \"bar\"))) ragnar_store_build_index(store) ragnar_retrieve(store, \"foo\") #> # A tibble: 2 × 6 #>      id origin hash                             text  cosine_distance   bm25 #>   <int> <chr>  <chr>                            <chr>           <dbl>  <dbl> #> 1     2 NA     9f154be5a85276c7506e6553247c2c80 bar             0.175 NA     #> 2     1 NA     c1562fbd8fd449ea1c841e1688fabe2a foo             0.307  0.301  # More Advanced: store metadata, retrieve with pre-filtering store <- ragnar_store_create(   embed = mock_embed,   extra_cols = data.frame(category = character()) ) ragnar_store_insert(   store,   data.frame(     category = c(\"desert\", \"desert\", \"desert\", \"meal\", \"meal\", \"meal\"),     text = c(\"ice cream\", \"cake\", \"cookies\", \"pasta\", \"burger\", \"salad\")   ) ) ragnar_store_build_index(store)  # simple retrieve ragnar_retrieve(store, \"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text    cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>             <dbl> #> 1     3 desert   NA     a1c54a4f1d87aee9aaa3e0905538cbfe cookies           0.179 #> 2     6 meal     NA     549caee504d74c3dbec40909849957c3 salad             0.180 #> 3     1 desert   NA     68e1d6a6cc354e3e99ae4b78c577eb29 ice cr…           0.201  # retrieve with pre-filtering dplyr::tbl(store) |>   dplyr::filter(category == \"meal\") |>   ragnar_retrieve(\"yummy\") #> # A tibble: 3 × 6 #>      id category origin hash                             text   cosine_distance #>   <int> <chr>    <chr>  <chr>                            <chr>            <dbl> #> 1     5 meal     NA     3d59d8377de9154b8fa040e68aa6b197 burger           0.135 #> 2     4 meal     NA     f52c971e2e05ea580f5dec52255c4070 pasta            0.149 #> 3     6 meal     NA     549caee504d74c3dbec40909849957c3 salad            0.181"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_build_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Ragnar Store index — ragnar_store_build_index","title":"Build a Ragnar Store index — ragnar_store_build_index","text":"search index must built calling ragnar_retrieve(). additional entries added store ragnar_store_insert(), ragnar_store_build_index() must called rebuild index.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_build_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Ragnar Store index — ragnar_store_build_index","text":"","code":"ragnar_store_build_index(store, type = c(\"vss\", \"fts\"))"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_build_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Ragnar Store index — ragnar_store_build_index","text":"store RagnarStore object type retrieval search type build index .","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_build_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Ragnar Store index — ragnar_store_build_index","text":"store, invisibly.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and connect to a vector store — ragnar_store_create","title":"Create and connect to a vector store — ragnar_store_create","text":"Create connect vector store","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and connect to a vector store — ragnar_store_create","text":"","code":"ragnar_store_create(   location = \":memory:\",   embed = embed_ollama(),   embedding_size = ncol(embed(\"foo\")),   overwrite = FALSE,   ...,   extra_cols = NULL,   name = NULL )"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and connect to a vector store — ragnar_store_create","text":"location filepath, :memory: embed function called character vector returns matrix embeddings. Note function serialized deserialized new R sessions, reference objects global parent environments. Make sure namespace function calls ::. additional R objects must available function, can optionally supply carrier::crate() packaged data. can also NULL stores need embed texts, example, using FTS algorithms ragnar_retrieve_bm25(). embedding_size integer overwrite logical, location already exists ... Unused. Must empty. extra_cols zero row data frame used specify additional columns added store. columns can used adding additional context retrieving. See examples information. vctrs::vec_cast() used consistently perform type checks casts inserting ragnar_store_insert(). name unique name store. Must match ^[-zA-Z0-9_-]+$ regex. Used ragnar_register_tool_retrieve() registering tools.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and connect to a vector store — ragnar_store_create","text":"DuckDBRagnarStore object","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and connect to a vector store — ragnar_store_create","text":"","code":"# A store with a dummy embedding store <- ragnar_store_create(   embed = \\(x) matrix(stats::runif(10), nrow = length(x), ncol = 10), ) ragnar_store_insert(store, data.frame(text = \"hello\"))  # A store with a schema. When inserting into this store, users need to # provide a `area` column. store <- ragnar_store_create(   embed = \\(x) matrix(stats::runif(10), nrow = length(x), ncol = 10),   extra_cols = data.frame(area = character()), ) ragnar_store_insert(store, data.frame(text = \"hello\", area = \"rag\"))  # If you already have a data.frame with chunks that will be inserted into # the store, you can quickly create a suitable store with: chunks <- data.frame(text = letters, area = \"rag\") store <- ragnar_store_create(   embed = \\(x) matrix(stats::runif(10), nrow = length(x), ncol = 10),   extra_cols = vctrs::vec_ptype(chunks), ) ragnar_store_insert(store, chunks)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert chunks into a RagnarStore — ragnar_store_insert","title":"Insert chunks into a RagnarStore — ragnar_store_insert","text":"Insert chunks RagnarStore","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert chunks into a RagnarStore — ragnar_store_insert","text":"","code":"ragnar_store_insert(store, chunks)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert chunks into a RagnarStore — ragnar_store_insert","text":"store RagnarStore object chunks character vector dataframe text column, optionally, pre-computed embedding matrix column. embedding present, store@embed() used. chunks can also character vector.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert chunks into a RagnarStore — ragnar_store_insert","text":"store, invisibly.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Launches the Ragnar Inspector Tool — ragnar_store_inspect","title":"Launches the Ragnar Inspector Tool — ragnar_store_inspect","text":"Launches Ragnar Inspector Tool","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launches the Ragnar Inspector Tool — ragnar_store_inspect","text":"","code":"ragnar_store_inspect(store, ...)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launches the Ragnar Inspector Tool — ragnar_store_inspect","text":"store RagnarStore object want inspect tool. ... Passed shiny::runApp().","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launches the Ragnar Inspector Tool — ragnar_store_inspect","text":"NULL invisibly","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Inserts or updates chunks in a RagnarStore — ragnar_store_update","title":"Inserts or updates chunks in a RagnarStore — ragnar_store_update","text":"Inserts updates chunks RagnarStore","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inserts or updates chunks in a RagnarStore — ragnar_store_update","text":"","code":"ragnar_store_update(store, chunks)"},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inserts or updates chunks in a RagnarStore — ragnar_store_update","text":"store RagnarStore object chunks character vector dataframe text column, optionally, pre-computed embedding matrix column. embedding present, store@embed() used. chunks can also character vector.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inserts or updates chunks in a RagnarStore — ragnar_store_update","text":"store, invisibly.","code":""},{"path":"https://ragnar.tidyverse.org/reference/ragnar_store_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inserts or updates chunks in a RagnarStore — ragnar_store_update","text":"chunks must data frame containing origin hash columns. first filter chunks origin hash already store. origin store, different hash, chunks new chunks. Otherwise, regular insert performed. can help spending less time computing embeddings chunks already store.","code":""},{"path":"https://ragnar.tidyverse.org/reference/rangar_store_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to RagnarStore — ragnar_store_connect","title":"Connect to RagnarStore — ragnar_store_connect","text":"Connect RagnarStore","code":""},{"path":"https://ragnar.tidyverse.org/reference/rangar_store_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to RagnarStore — ragnar_store_connect","text":"","code":"ragnar_store_connect(   location = \":memory:\",   ...,   read_only = FALSE,   build_index = FALSE )"},{"path":"https://ragnar.tidyverse.org/reference/rangar_store_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to RagnarStore — ragnar_store_connect","text":"location string, filepath location. ... unused; must empty. read_only logical, whether returned connection can used modify store. build_index logical, whether call ragnar_store_build_index() creating connection","code":""},{"path":"https://ragnar.tidyverse.org/reference/rangar_store_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to RagnarStore — ragnar_store_connect","text":"RagnarStore object.","code":""},{"path":"https://ragnar.tidyverse.org/reference/read_as_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert files to markdown — read_as_markdown","title":"Convert files to markdown — read_as_markdown","text":"Convert files markdown","code":""},{"path":"https://ragnar.tidyverse.org/reference/read_as_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert files to markdown — read_as_markdown","text":"","code":"read_as_markdown(x, ..., canonical = FALSE)"},{"path":"https://ragnar.tidyverse.org/reference/read_as_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert files to markdown — read_as_markdown","text":"x filepath url ... dots future extensions must empty. canonical logical, whether postprocess output MarkItDown commonmark::markdown_commonmark().","code":""},{"path":"https://ragnar.tidyverse.org/reference/read_as_markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert files to markdown — read_as_markdown","text":"single string markdown","code":""},{"path":"https://ragnar.tidyverse.org/reference/read_as_markdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert files to markdown — read_as_markdown","text":"","code":"# convert html read_as_markdown(\"https://r4ds.hadley.nz/base-R.html\") |>   substr(1, 1000) |> cat() #> # 27  A field guide to base R – R for Data Science (2e) #>  #> 1. [Program](./program.html) #> 2. [27  A field guide to base R](./base-R.html) #>  #> [R for Data Science (2e)](./) #>  #> * [Welcome](./index.html) #> * [Preface to the second edition](./preface-2e.html) #> * [Introduction](./intro.html) #> * [Whole game](./whole-game.html) #>  #>   + [1  Data visualization](./data-visualize.html) #>   + [2  Workflow: basics](./workflow-basics.html) #>   + [3  Data transformation](./data-transform.html) #>   + [4  Workflow: code style](./workflow-style.html) #>   + [5  Data tidying](./data-tidy.html) #>   + [6  Workflow: scripts and projects](./workflow-scripts.html) #>   + [7  Data import](./data-import.html) #>   + [8  Workflow: getting help](./workflow-help.html) #> * [Visualize](./visualize.html) #>  #>   + [9  Layers](./layers.html) #>   + [10  Exploratory data analysis](./EDA.html) #>   + [11  Communication](./communication.html) #> * [Transform](./transform.html) #>  #>   + [12  Logical vectors](./logicals.html) #>   + [13  Numbers](./numbers.html) #>   + [14  String  read_as_markdown(\"https://r4ds.hadley.nz/base-R.html\", canonical = TRUE) |>   substr(1, 1000) |> cat() #> # 27  A field guide to base R – R for Data Science (2e) #>  #> 1.  [Program](./program.html) #> 2.  [27  A field guide to base R](./base-R.html) #>  #> [R for Data Science (2e)](./) #>  #>   - [Welcome](./index.html) #>  #>   - [Preface to the second edition](./preface-2e.html) #>  #>   - [Introduction](./intro.html) #>  #>   - [Whole game](./whole-game.html) #>      #>       - [1  Data visualization](./data-visualize.html) #>       - [2  Workflow: basics](./workflow-basics.html) #>       - [3  Data transformation](./data-transform.html) #>       - [4  Workflow: code style](./workflow-style.html) #>       - [5  Data tidying](./data-tidy.html) #>       - [6  Workflow: scripts and projects](./workflow-scripts.html) #>       - [7  Data import](./data-import.html) #>       - [8  Workflow: getting help](./workflow-help.html) #>  #>   - [Visualize](./visualize.html) #>      #>       - [9  Layers](./layers.html) #>       - [10  Exploratory data analysis](./EDA.html) #>       - [11  Communication](./communication.html) #>  #>   - [Transform](./transform.html) #>      #>       - [12  Logi  # convert pdf pdf <- file.path(R.home(\"doc\"), \"NEWS.pdf\") read_as_markdown(pdf) |> substr(1, 1000) |> cat() #> NEWS for R version 4.5.0 (2025-04-11) #>  #> NEWS #>  #> R News #>  #> CHANGES IN R 4.5.0 #>  #> NEW FEATURES: #>  #> (cid:136) as.integer(rl) and hence as.raw(rl) now work for a list of raw(1) elements, as #>  #> proposed by Michael Chirico’s PR#18696. #>  #> (cid:136) graphics’ grid() gains optional argument nintLog. #> (cid:136) New functions check_package_urls() and check_package_dois() in package tools #>  #> for checking URLs and DOIs in package sources. #>  #> (cid:136) New head() and tail() methods for class \"ts\" time series, proposed by Spencer #>  #> Graves on R-devel. #>  #> (cid:136) New qr.influence() function, a (cid:16)bare bones(cid:17) interface to the lm.influence() leave- #>  #> one-out diagnostics computations; wished for in PR#18739. #>  #> (cid:136) Package citation() results auto-generated from the package metadata now also pro- #>  #> vide package DOIs for CRAN and Bioconductor packages. #>  #> (cid:136) New function grepv() identical to grep() except for the default value = TRUE. #> (cid:136) methods(<pkg>:::<genfun>) now does report methods when neither  ## alternative: # pdftools::pdf_text(pdf) |> substr(1, 2000) |> cat()  # convert images jpg <- file.path(R.home(\"doc\"), \"html\", \"logo.jpg\") if (FALSE) {   # system(\"brew install ffmpeg\")   reticulate::py_require(\"openai\")   llm_client <- reticulate::import(\"openai\")$OpenAI()   read_as_markdown(jpg,     llm_client = llm_client,     llm_model = \"gpt-4o\"   )   # # Description:   # The image features the official logo of the R programming language.   # Prominently displayed is a bold, blue letter \"R,\" which serves as the   # centerpiece of the design. Encircling the \"R\" is a two-toned,   # stylized oval or ellipse with a gradient that transitions from dark   # gray to light gray, creating a sense of motion and dynamics. R is an   # open-source programming language widely used for statistical   # computing, data analysis, and graphical representation. The logo   # represents the language's focus on clarity, precision, and   # versatility in handling complex data tasks. }  # Alternative approach to image conversion: if(FALSE) {   if (Sys.getenv(\"OPENAI_API_KEY\") != \"\") {     rlang::check_installed(c(\"ellmer\", \"magick\"))     chat <- ellmer::chat_openai(echo = TRUE)     chat$chat(\"Describe this image\", ellmer::content_image_file(jpg))   } }"},{"path":"https://ragnar.tidyverse.org/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dotty .","code":""}]
